import { parseScript, parseModule } from "../../../src";
import {expect} from "chai";

describe.skip("TC39 - Passes", () => {

    it("should parse \"while(true) function a(){}\"", () => {
        expect(parseScript(`while(true) function a(){}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "Literal",
                        value: true,
                    },
                    body: {
                        type: "FunctionDeclaration",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        expression: false,
                        generator: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function eval() {\"use strict\"; }\"", () => {
        expect(parseScript(`function eval() {"use strict"; }`)).to.eql({
        body: [
          {
            async: false,
            body: {
              body: [
                {
                 expression: {
                    type: "Literal",
                    value: "use strict",
                  },
                  type: "ExpressionStatement",
                },
              ],
             type: "BlockStatement",
            },
           expression: false,
            generator: false,
            id: {
              name: "eval",
              type: "Identifier",
            },
            params: [],
            type: "FunctionDeclaration",
          },
        ],
        sourceType: "script",
        type: "Program",
      });
       });

    it("should parse \"({start, stop}) = othernode;\"", () => {
        expect(parseScript(`({start, stop}) = othernode;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "ObjectPattern",
                    properties: [
                        {
                            type: "Property",
                            key: {
                                type: "Identifier",
                                name: "start",
                            },
                            computed: false,
                            value: {
                                type: "Identifier",
                                name: "start",
                            },
                            kind: "init",
                            method: false,
                            shorthand: true,
                        },
                        {
                            type: "Property",
                            key: {
                                type: "Identifier",
                                name: "stop",
                            },
                            computed: false,
                            value: {
                                type: "Identifier",
                                name: "stop",
                            },
                            kind: "init",
                            method: false,
                            shorthand: true,
                        },
                    ],
                },
                right: {
                    type: "Identifier",
                    name: "othernode",
                },
            },
        },
    ],
    sourceType: "script",
});
     });

    it("should parse \"let {start, stop} = node;\"", () => {
        expect(parseScript(`let {start, stop} = node;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "ObjectPattern",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "start",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "start",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "stop",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "stop",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                        ],
                    },
                    init: {
                        type: "Identifier",
                        name: "node",
                    },
                },
            ],
            kind: "let",
        },
    ],
    sourceType: "script",
});
      });

    it("should parse \"function static() {\"use strict\"; }\"", () => {
        expect(parseScript(`function static() {"use strict"; }`)).to.eql({
        body: [
          {
            async: false,
            body: {
              body: [
                {
                  expression: {
                    type: "Literal",
                    value: "use strict",
                  },
                  type: "ExpressionStatement",
                },
              ],
              type: "BlockStatement",
            },
            expression: false,
            generator: false,
            id: {
              name: "static",
              type: "Identifier",
            },
           params: [],
            type: "FunctionDeclaration",
          },
        ],
        sourceType: "script",
        type: "Program",
      });
       });

    it("should parse \"({[\"__proto__\"]:1, [\"__proto__\"]:2})\"", () => {
        expect(parseScript(`({["__proto__"]:1, ["__proto__"]:2})`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Literal",
                            value: "__proto__",
                        },
                        computed: true,
                        value: {
                            type: "Literal",
                            value: 1,
                        },
                        kind: "init",
                        method: false,
                        shorthand: false,
                    },
                    {
                        type: "Property",
                        key: {
                            type: "Literal",
                            value: "__proto__",
                        },
                        computed: true,
                        value: {
                            type: "Literal",
                            value: 2,
                        },
                        kind: "init",
                        method: false,
                        shorthand: false,
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"var a = /[\u{61}-b][\u0061-b][a-\u{62}][a-\u0062]\u{1ffff}/u;\"", () => {
        expect(parseScript(`var a = /[\u{61}-b][\u0061-b][a-\u{62}][a-\u0062]\u{1ffff}/u;`))
        .to.eql({
    type: "Program",
    body: [
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    init: {
                        type: "Literal",
                        value: /[a-b][a-b][a-b][a-b]ðŸ¿¿/u,
                        regex: {
                            pattern: "[a-b][a-b][a-b][a-b]ðŸ¿¿",
                            flags: "",
                        },
                    },
                },
            ],
            kind: "var",
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"a = { __proto__: 1 }\"", () => {
        expect(parseScript(`a = { __proto__: 1 }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "ObjectExpression",
                    properties: [
                        {
                            type: "Property",
                            key: {
                                type: "Identifier",
                                name: "__proto__",
                            },
                            computed: false,
                            value: {
                                type: "Literal",
                                value: 1,
                            },
                            kind: "init",
                            method: false,
                            shorthand: false,
                        },
                    ],
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"a = {\"__proto__\": 1 }\"", () => {
        expect(parseScript(`a = {"__proto__": 1 }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "ObjectExpression",
                    properties: [
                        {
                            type: "Property",
                            key: {
                                type: "Literal",
                                value: "__proto__",
                            },
                            computed: false,
                            value: {
                                type: "Literal",
                                value: 1,
                            },
                            kind: "init",
                            method: false,
                            shorthand: false,
                        },
                    ],
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"a | b | c\"", () => {
        expect(parseScript(`a | b | c`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "BinaryExpression",
                operator: "|",
                left: {
                    type: "BinaryExpression",
                    operator: "|",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                },
                right: {
                    type: "Identifier",
                    name: "c",
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"\"use strict\"; var a = { set b(a) {}, b: 1 }\"", () => {
        expect(parseScript(`"use strict"; var a = { set b(a) {}, b: 1 }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: "use strict",
            },
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    init: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            kind: "var",
        },
    ],
    sourceType: "script",
});
    });
    // This fails because 'computed are not right'
    it("should parse \"({[a](){}})\"", () => {
        expect(parseScript(`({[a](){}})`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Identifier",
                            name: "a",
                        },
                        computed: false,
                        value: {
                            type: "FunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                        kind: "init",
                        method: true,
                        shorthand: false,
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"a + (b < (c * d)) + e\"", () => {
        expect(parseScript(`a + (b < (c * d)) + e`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "BinaryExpression",
                operator: "+",
                left: {
                    type: "BinaryExpression",
                    operator: "+",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "BinaryExpression",
                        operator: "<",
                        left: {
                            type: "Identifier",
                            name: "b",
                        },
                        right: {
                            type: "BinaryExpression",
                            operator: "*",
                            left: {
                                type: "Identifier",
                                name: "c",
                            },
                            right: {
                                type: "Identifier",
                                name: "d",
                            },
                        },
                    },
                },
                right: {
                    type: "Identifier",
                    name: "e",
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"__proto__: while (true) { break __proto__; }\"", () => {
        expect(parseScript(`__proto__: while (true) { break __proto__; }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "LabeledStatement",
            label: {
                type: "Identifier",
                name: "__proto__",
            },
            body: {
                type: "WhileStatement",
                test: {
                    type: "Literal",
                    value: true,
                },
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "BreakStatement",
                            label: {
                                type: "Identifier",
                                name: "__proto__",
                            },
                        },
                    ],
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseScript(`while (true) {
    if (a) break
    ;
    else b;
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "WhileStatement",
            test: {
                type: "Literal",
                value: true,
            },
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "a",
                        },
                        consequent: {
                            type: "BreakStatement",
                            label: null,
                        },
                        alternate: {
                            type: "ExpressionStatement",
                            expression: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"\u0061a\"", () => {
        expect(parseScript(`\u0061a`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "Identifier",
                name: "aa",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseScript(`if (true) a()
; else;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "IfStatement",
            test: {
                type: "Literal",
                value: true,
            },
            consequent: {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [],
                },
            },
            alternate: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"if (true) a(); else;\"", () => {
        expect(parseScript(`if (true) a(); else;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "IfStatement",
            test: {
                type: "Literal",
                value: true,
            },
            consequent: {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [],
                },
            },
            alternate: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for (const a in b) c(a);\"", () => {
        expect(parseScript(`
for (const a in b) c(a);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForInStatement",
            left: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        init: null,
                    },
                ],
                kind: "const",
            },
            right: {
                type: "Identifier",
                name: "b",
            },
            body: {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "c",
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "a",
                        },
                    ],
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for (let a = let;;) {}\"", () => {
        expect(parseScript(`for (let a = let;;) {}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForStatement",
            init: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        init: {
                            type: "Identifier",
                            name: "let",
                        },
                    },
                ],
                kind: "let",
            },
            test: null,
            update: null,
            body: {
                type: "BlockStatement",
                body: [],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for(a,b,c;;);\"", () => {
        expect(parseScript(`for(a,b,c;;);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForStatement",
            init: {
                type: "SequenceExpression",
                expressions: [
                    {
                        type: "Identifier",
                        name: "a",
                    },
                    {
                        type: "Identifier",
                        name: "b",
                    },
                    {
                        type: "Identifier",
                        name: "c",
                    },
                ],
            },
            test: null,
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"{ do { } while (false) false }\"", () => {
        expect(parseScript(`{ do { } while (false) false }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "BlockStatement",
            body: [
                {
                    type: "DoWhileStatement",
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    test: {
                        type: "Literal",
                        value: false,
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: false,
                    },
                },
            ],
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for (a(b in c)[1] in d);\"", () => {
        expect(parseScript(`for (a(b in c)[1] in d);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForInStatement",
            left: {
                type: "MemberExpression",
                computed: true,
                object: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "in",
                            left: {
                                type: "Identifier",
                                name: "b",
                            },
                            right: {
                                type: "Identifier",
                                name: "c",
                            },
                        },
                    ],
                },
                property: {
                    type: "Literal",
                    value: 1,
                },
            },
            right: {
                type: "Identifier",
                name: "d",
            },
            body: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for (a.in in a);\"", () => {
        expect(parseScript(`for (a.in in a);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForInStatement",
            left: {
                type: "MemberExpression",
                computed: false,
                object: {
                    type: "Identifier",
                    name: "a",
                },
                property: {
                    type: "Identifier",
                    name: "in",
                },
            },
            right: {
                type: "Identifier",
                name: "a",
            },
            body: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"__proto__: a\"", () => {
        expect(parseScript(`__proto__: a`)).to.eql({
    type: "Program",
    body: [
        {
            type: "LabeledStatement",
            label: {
                type: "Identifier",
                name: "__proto__",
            },
            body: {
                type: "ExpressionStatement",
                expression: {
                    type: "Identifier",
                    name: "a",
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"a: function a(){}\"", () => {
        expect(parseScript(`a: function a(){}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "LabeledStatement",
            label: {
                type: "Identifier",
                name: "a",
            },
            body: {
                type: "FunctionDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                params: [],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                generator: false,
                expression: false,
                async: false,
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"x && y ? 1 : 2\"", () => {
        expect(parseScript(`x && y ? 1 : 2`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "ConditionalExpression",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "x",
                    },
                    right: {
                        type: "Identifier",
                        name: "y",
                    },
                },
                consequent: {
                    type: "Literal",
                    value: 1,
                },
                alternate: {
                    type: "Literal",
                    value: 2,
                },
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"\"throw { message: \"Error\" }\"", () => {
        expect(parseScript(`throw { message: "Error" }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ThrowStatement",
            argument: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Identifier",
                            name: "message",
                        },
                        computed: false,
                        value: {
                            type: "Literal",
                            value: "Error",
                        },
                        kind: "init",
                        method: false,
                        shorthand: false,
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"(function test(t, t) { })\"", () => {
        expect(parseScript(`(function test(t, t) { })`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "FunctionExpression",
                id: {
                    type: "Identifier",
                    name: "test",
                },
                params: [
                    {
                        type: "Identifier",
                        name: "t",
                    },
                    {
                        type: "Identifier",
                        name: "t",
                    },
                ],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                generator: false,
                expression: false,
                async: false,
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"function eval() { function inner() { \"use strict\" } }\"", () => {
        expect(parseScript(`function eval() { function inner() { "use strict" } }`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "eval",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "FunctionDeclaration",
                        id: {
                            type: "Identifier",
                            name: "inner",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "Literal",
                                        value: "use strict",
                                    },
                                },
                            ],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"var x /* comment */;\"", () => {
        expect(parseScript(`var x /* comment */;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "x",
                    },
                    init: null,
                },
            ],
            kind: "var",
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"{ var x = 14, y = 3\nz; }\"", () => {
        expect(parseScript(`{ var x = 14, y = 3\nz; }`)).to.eql({
        body: [
          {
            body: [
              {
                declarations: [
                  {
                    id: {
                      name: "x",
                      type: "Identifier",
                   },
                    init: {
                     type: "Literal",
                      value: 14,
                    },
                    type: "VariableDeclarator",
                  },
                  {
                    id: {
                      name: "y",
                     type: "Identifier",
                    },
                    init: {
                      type: "Literal",
                      value: 3,
                    },
                   type: "VariableDeclarator",
                  },
                ],
                kind: "var",
                type: "VariableDeclaration",
              },
              {
                expression: {
                  name: "z",
                  type: "Identifier",
               },
                type: "ExpressionStatement",
              },
            ],
            type: "BlockStatement",
          },
        ],
        sourceType: "script",
        type: "Program",
      });
    });

    it("should parse \"while (true) { continue // Comment\nthere; }\"", () => {
        expect(parseScript(`while (true) { continue // Comment\nthere; }`)).to.eql({
        body: [
         {
            body: {
             body: [
                {
                  label: null,
                  type: "ContinueStatement",
                },
                {
                  expression: {
                    name: "there",
                    type: "Identifier",
                  },
                  type: "ExpressionStatement",
               },
              ],
              type: "BlockStatement",
            },
            test: {
              type: "Literal",
              value: true,
            },
            type: "WhileStatement",
          },
        ],
        sourceType: "script",
        type: "Program",
      });
    });

    it("should parse \"for(const x = 0;;);\"", () => {
        expect(parseScript(`for(const x = 0;;);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForStatement",
            init: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "x",
                        },
                        init: {
                            type: "Literal",
                            value: 0,
                        },
                    },
                ],
                kind: "const",
            },
            test: null,
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"for (let {} in 1);\"", () => {
        expect(parseScript("for (let {} in 1);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "ObjectPattern",
                                    properties: [],
                                },
                                init: null,
                            },
                        ],
                        kind: "let",
                    },
                    right: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let [{a}] = 1\"", () => {
        expect(parseScript("let [{a}] = 1")).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "ObjectPattern",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                computed: false,
                                                value: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: true,
                                            },
                                        ],
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let {a,} = 1\"", () => {
        expect(parseScript("let {a,} = 1")).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try { } catch ({}) {}\"", () => {
        expect(parseScript("try { } catch ({}) {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "ObjectPattern",
                            properties: [],
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a({}) {}\"", () => {
        expect(parseScript("function a({}) {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (let {} in 1);\"", () => {
        expect(parseScript("for (let {} in 1);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "ObjectPattern",
                                    properties: [],
                                },
                                init: null,
                            },
                        ],
                        kind: "let",
                    },
                    right: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let {a:{}} = 1\"", () => {
        expect(parseScript("let {a:{}} = 1")).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "ObjectPattern",
                                            properties: [],
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let {a,b=1,c:d,e:f=2,[g]:[h]}=3\"", () => {
        expect(parseScript("let {a,b=1,c:d,e:f=2,[g]:[h]}=3")).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "AssignmentPattern",
                                            left: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        computed: false,
                                        value: {
                                            type: "AssignmentPattern",
                                            left: {
                                                type: "Identifier",
                                                name: "f",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 2,
                                            },
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "g",
                                        },
                                        computed: true,
                                        value: {
                                            type: "ArrayPattern",
                                            elements: [
                                                {
                                                    type: "Identifier",
                                                    name: "h",
                                                },
                                            ],
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 3,
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });
    it("should parse \"for (var {a, b} in c);\"", () => {
        expect(parseScript("for (var {a, b} in c);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "ObjectPattern",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            computed: false,
                                            value: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: true,
                                        },
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            computed: false,
                                            value: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: true,
                                        },
                                    ],
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    right: {
                        type: "Identifier",
                        name: "c",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {}\"", () => {
        expect(parseScript("class a {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends 1 {}\"", () => {
        expect(parseScript("class a extends 1 {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "ClassBody",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {;}\"", () => {
        expect(parseScript("class a {;}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });
    it("should parse \"class a {;;}\"", () => {
        expect(parseScript("class a {;;}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {b(){}}\"", () => {
        expect(parseScript("class a {b(){}}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {b(){};c(){}}\"", () => {
        expect(parseScript("class a {b(){};c(){}}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[{a=b}=1]\"", () => {
        expect(parseScript("[{a=b}=1]")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "ObjectPattern",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            computed: false,
                                            value: {
                                                type: "AssignmentPattern",
                                                left: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: true,
                                        },
                                    ],
                                },
                                right: {
                                    type: "Literal",
                                    value: 1,
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });
    it("should parse \"a ^ b\"", () => {
        expect(parseScript("a ^ b")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "^",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (var a of b)\"", () => {
        expect(parseScript("for (var a of b)")).to.eql({
            body: [
                {
                    await: false,
                    body: {
                        expression: {
                            name: "b",
                            type: "Identifier",
                        },
                        type: "ExpressionStatement",
                    },
                    left: {
                        declarations: [
                            {
                                id: {
                                    name: "a",
                                    type: "Identifier",
                                },
                                init: null,
                                type: "VariableDeclarator",
                            },
                        ],
                        kind: "var",
                        type: "VariableDeclaration",
                    },
                    right: {
                        name: "b",
                        type: "Identifier",
                    },
                    type: "ForOfStatement",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"function *a() { yield* 1; }\"", () => {
        expect(parseScript("function *a() { yield* 1; }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    delegate: true,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ *a(b, c, d) {} })\"", () => {
        expect(parseScript("({ *a(b, c, d) {} })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });
    it("should parse \"({ *a() { yield* 1; } })\"", () => {
        expect(parseScript("({ *a() { yield* 1; } })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "YieldExpression",
                                                    argument: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                    delegate: true,
                                                },
                                            },
                                        ],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ *a() { yield; } })\"", () => {
        expect(parseScript("({ *a() { yield; } })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "YieldExpression",
                                                    argument: null,
                                                    delegate: false,
                                                },
                                            },
                                        ],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ *a() {} })\"", () => {
        expect(parseScript("({ *a() {} })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a { static *b() {} }\"", () => {
        expect(parseScript("class a { static *b() {} }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){yield a}\"", () => {
        expect(parseScript(`function a() {
    new new.target()();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "NewExpression",
                                        callee: {
                                            type: "MetaProperty",
                                            meta: {
                                                type: "Identifier",
                                                name: "new",
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "target",
                                            },
                                        },
                                        arguments: [],
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ __proto__: null, get __proto__(){}, set __proto__(a){} })\"", () => {
        expect(parseScript("({ __proto__: null, get __proto__(){}, set __proto__(a){} })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: "null",
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ \"__proto__\": null, set __proto__(a){} })\"", () => {
        expect(parseScript("({ \"__proto__\": null, set __proto__(a){} })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: "null",
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a(b, ...c = d);\"", () => {
        expect(parseScript("a(b, ...c = d);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a(...b);\"", () => {
        expect(parseScript("a(...b);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(b, ...c = d);\"", () => {
        expect(parseScript("new a(b, ...c = d);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(...b, c, d);\"", () => {
        expect(parseScript("new a(...b, c, d);")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                            {
                                type: "Identifier",
                                name: "c",
                            },
                            {
                                type: "Identifier",
                                name: "d",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var { a: yield } = b;\"", () => {
        expect(parseScript("var { a: yield } = b;")).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "yield",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(yield) => 1;\"", () => {
        expect(parseScript("(yield) => 1;")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "yield",
                            },
                        ],
                        body: {
                            type: "Literal",
                            value: 1,
                        },
                        generator: false,
                        expression: true,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a = yield) => {}\"", () => {
        expect(parseScript("(a = yield) => {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "AssignmentPattern",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "yield",
                                },
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a) => { yield + a };\"", () => {
        expect(parseScript("(a) => { yield + a };")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Identifier",
                                            name: "yield",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                },
                            ],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a) => a * yield;\"", () => {
        expect(parseScript("(a) => a * yield;")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                        ],
                        body: {
                            type: "BinaryExpression",
                            operator: "*",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Identifier",
                                name: "yield",
                            },
                        },
                        generator: false,
                        expression: true,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"([yield] = a)\"", () => {
        expect(parseScript("([yield] = a)")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "yield",
                                },
                            ],
                        },
                        right: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a() { b.yield(); }\"", () => {
        expect(parseScript("function *a() { b.yield(); }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "yield",
                                        },
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try {} catch (yield) {}\"", () => {
        expect(parseScript("try {} catch (yield) {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "Identifier",
                            name: "yield",
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a() { yield b=c, yield* d=e, f }\"", () => {
        expect(parseScript("function *a() { yield b=c, yield* d=e, f }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "SequenceExpression",
                                    expressions: [
                                        {
                                            type: "YieldExpression",
                                            argument: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                            },
                                            delegate: false,
                                        },
                                        {
                                            type: "YieldExpression",
                                            argument: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "e",
                                                },
                                            },
                                            delegate: true,
                                        },
                                        {
                                            type: "Identifier",
                                            name: "f",
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function yield(){}\"", () => {
        expect(parseScript("function yield(){}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "yield",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function(yield) {})\"", () => {
        expect(parseScript("(function(yield) {})")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "yield",
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a() { (b) => b * yield; }\"", () => {
        expect(parseScript("function *a() { (b) => b * yield; }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "ArrowFunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    ],
                                    body: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "yield",
                                        },
                                    },
                                    generator: false,
                                    expression: true,
                                    async: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a() { (b) => { yield + b }; }\"", () => {
        expect(parseScript("function *a() { (b) => { yield + b }; }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "ArrowFunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "BinaryExpression",
                                                    operator: "+",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "yield",
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "b",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a() { var b = function(yield) {} }\"", () => {
        expect(parseScript("function *a() { var b = function(yield) {} }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        init: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [
                                                {
                                                    type: "Identifier",
                                                    name: "yield",
                                                },
                                            ],
                                            body: {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a({yield: b}){}\"", () => {
        expect(parseScript("function *a({yield: b}){}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a(...yield) {}\"", () => {
        expect(parseScript("function a(...yield) {}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "RestElement",
                            argument: {
                                type: "Identifier",
                                name: "yield",
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"\"use strict\"; var { yield: a } = b;\"", () => {
        expect(parseScript("\"use strict\"; var { yield: a } = b;")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: "use strict",
                    },
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "yield",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"\"use strict\"; ({ yield() {} })\"", () => {
        expect(parseScript("\"use strict\"; ({ yield() {} })")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: "use strict",
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "yield",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { c() { super.yield } }\"", () => {
        expect(parseScript("class a extends b { c() { super.yield } }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "MemberExpression",
                                                    computed: false,
                                                    object: {
                                                        type: "Super",
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "yield",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a || b && c | d ^ e & f == g < h >>> i + j * k\"", () => {
        expect(parseScript("a || b && c | d ^ e & f == g < h >>> i + j * k")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "LogicalExpression",
                        operator: "||",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "Identifier",
                                name: "b",
                            },
                            right: {
                                type: "BinaryExpression",
                                operator: "|",
                                left: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "^",
                                    left: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "&",
                                        left: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "==",
                                            left: {
                                                type: "Identifier",
                                                name: "f",
                                            },
                                            right: {
                                                type: "BinaryExpression",
                                                operator: "<",
                                                left: {
                                                    type: "Identifier",
                                                    name: "g",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: ">>>",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "h",
                                                    },
                                                    right: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "i",
                                                        },
                                                        right: {
                                                            type: "BinaryExpression",
                                                            operator: "*",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "j",
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "k",
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = (1) ? 2 : 3\"", () => {
        expect(parseScript("a = (1) ? 2 : 3")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: {
                                type: "Literal",
                                value: 2,
                            },
                            alternate: {
                                type: "Literal",
                                value: 3,
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(1) + (2  ) + 3\"", () => {
        expect(parseScript("(1) + (2  ) + 3")).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Literal",
                                value: 1,
                            },
                            right: {
                                type: "Literal",
                                value: 2,
                            },
                        },
                        right: {
                            type: "Literal",
                            value: 3,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){yield a}\"", () => {
        expect(parseScript("function* a(){yield a}")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *foo() { yield* 3; }\"", () => {
        expect(parseScript("function *foo() { yield* 3; }")).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "foo",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                    delegate: true,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a || b && c\"", () => {
        expect(parseScript(`a || b && c`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "LogicalExpression",
                        operator: "||",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "Identifier",
                                name: "b",
                            },
                            right: {
                                type: "Identifier",
                                name: "c",
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { constructor() { super() } }\"", () => {
        expect(parseScript(`class a extends b { constructor() { super() } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Super",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class extends a { constructor() { super() } });\"", () => {
        expect(parseScript(`(class extends a { constructor() { super() } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "constructor",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Super",
                                                        },
                                                        arguments: [],
                                                    },
                                                },
                                            ],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "constructor",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set a([{b = 1}]){}, })\"", () => {
        expect(parseScript(`({ set a([{b = 1}]){}, })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "ArrayPattern",
                                            elements: [
                                                {
                                                    type: "ObjectPattern",
                                                    properties: [
                                                        {
                                                            type: "Property",
                                                            key: {
                                                                type: "Identifier",
                                                                name: "b",
                                                            },
                                                            computed: false,
                                                            value: {
                                                                type: "AssignmentPattern",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "b",
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                },
                                                            },
                                                            kind: "init",
                                                            method: false,
                                                            shorthand: true,
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({set a(eval){}})\"", () => {
        expect(parseScript(`({set a(eval){}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "eval",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a(b,c){let d;}})\"", () => {
        expect(parseScript(`({a(b,c){let d;}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "d",
                                                        },
                                                        init: null,
                                                    },
                                                ],
                                                kind: "let",
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ if: 1 })\"", () => {
        expect(parseScript(`({ if: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "if",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ true: 1 })\"", () => {
        expect(parseScript(`({ true: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "true",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ false: 1 })\"", () => {
        expect(parseScript(`({ false: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "false",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"1+1\"", () => {
        expect(parseScript(`1+1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "Literal",
                            value: 1,
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(1+2)*3 || 4 && 5 && 6 || 7
  ? void 0
  : void 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ConditionalExpression",
                        test: {
                            type: "LogicalExpression",
                            operator: "||",
                            left: {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "*",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 2,
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                },
                                right: {
                                    type: "LogicalExpression",
                                    operator: "&&",
                                    left: {
                                        type: "LogicalExpression",
                                        operator: "&&",
                                        left: {
                                            type: "Literal",
                                            value: 4,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 5,
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 6,
                                    },
                                },
                            },
                            right: {
                                type: "Literal",
                                value: 7,
                            },
                        },
                        consequent: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Literal",
                                value: 0,
                            },
                            prefix: true,
                        },
                        alternate: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Literal",
                                value: 1,
                            },
                            prefix: true,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"1 === 1 ? 1 : 2 !== 2 ? 2 : 3 == 3 ? 3 : 4 != 4 ? 4 : 5;\"", () => {
        expect(parseScript(`1 === 1 ? 1 : 2 !== 2 ? 2 : 3 == 3 ? 3 : 4 != 4 ? 4 : 5;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ConditionalExpression",
                        test: {
                            type: "BinaryExpression",
                            operator: "===",
                            left: {
                                type: "Literal",
                                value: 1,
                            },
                            right: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                        consequent: {
                            type: "Literal",
                            value: 1,
                        },
                        alternate: {
                            type: "ConditionalExpression",
                            test: {
                                type: "BinaryExpression",
                                operator: "!==",
                                left: {
                                    type: "Literal",
                                    value: 2,
                                },
                                right: {
                                    type: "Literal",
                                    value: 2,
                                },
                            },
                            consequent: {
                                type: "Literal",
                                value: 2,
                            },
                            alternate: {
                                type: "ConditionalExpression",
                                test: {
                                    type: "BinaryExpression",
                                    operator: "==",
                                    left: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                },
                                consequent: {
                                    type: "Literal",
                                    value: 3,
                                },
                                alternate: {
                                    type: "ConditionalExpression",
                                    test: {
                                        type: "BinaryExpression",
                                        operator: "!=",
                                        left: {
                                            type: "Literal",
                                            value: 4,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 4,
                                        },
                                    },
                                    consequent: {
                                        type: "Literal",
                                        value: 4,
                                    },
                                    alternate: {
                                        type: "Literal",
                                        value: 5,
                                    },
                                },
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"1 + 2 - 3 * 4 / 5 % 6 << 7 >> 8 >>> 9 ? 1 ^ 1 : ~1 - 1, 2, 3;\"", () => {
        expect(parseScript(`1 + 2 - 3 * 4 / 5 % 6 << 7 >> 8 >>> 9 ? 1 ^ 1 : ~1 - 1, 2, 3;`))
        .to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "ConditionalExpression",
                                test: {
                                    type: "BinaryExpression",
                                    operator: ">>>",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: ">>",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "<<",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "-",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "+",
                                                    left: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 2,
                                                    },
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "%",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: "/",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "*",
                                                            left: {
                                                                type: "Literal",
                                                                value: 3,
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: 4,
                                                            },
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 5,
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 6,
                                                    },
                                                },
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 7,
                                            },
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 8,
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 9,
                                    },
                                },
                                consequent: {
                                    type: "BinaryExpression",
                                    operator: "^",
                                    left: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                                alternate: {
                                    type: "BinaryExpression",
                                    operator: "-",
                                    left: {
                                        type: "UnaryExpression",
                                        operator: "~",
                                        argument: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        prefix: true,
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            },
                            {
                                type: "Literal",
                                value: 2,
                            },
                            {
                                type: "Literal",
                                value: 3,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a;\"", () => {
        expect(parseScript(`var a;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a = 1;\"", () => {
        expect(parseScript(`var a = 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a(a) {}\"", () => {
        expect(parseScript(`function a(a) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "a",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"if (1) 1;\"", () => {
        expect(parseScript(`if (1) 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Literal",
                        value: 1,
                    },
                    consequent: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                    alternate: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"if (1) 1; else 2;\"", () => {
        expect(parseScript(`if (1) 1; else 2;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Literal",
                        value: 1,
                    },
                    consequent: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                    alternate: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Literal",
                            value: 2,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(function() {
  1;
})();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "FunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                ],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(function() {
  1;
}());`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "FunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                ],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(function() {
  1;
}).call(this);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "FunctionExpression",
                                id: null,
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            property: {
                                type: "Identifier",
                                name: "call",
                            },
                        },
                        arguments: [
                            {
                                type: "ThisExpression",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"false\"", () => {
        expect(parseScript(`false`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ a: 1, b: 2, c: 1 + 1 })\"", () => {
        expect(parseScript(`({ a: 1, b: 2, c: 1 + 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 2,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ a: 1, b: 2 })\"", () => {
        expect(parseScript(`({ a: 1, b: 2 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 2,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[,]\"", () => {
        expect(parseScript(`[,]`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            null,
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[,,]\"", () => {
        expect(parseScript(`[,,]`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            null,
                            null,
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ a: 1, b: 2, })\"", () => {
        expect(parseScript(`({ a: 1, b: 2, })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 2,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[[]]\"", () => {
        expect(parseScript(`[[]]`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "ArrayExpression",
                                elements: [],
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[[1]]\"", () => {
        expect(parseScript(`[[1]]`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "ArrayExpression",
                                elements: [
                                    {
                                        type: "Literal",
                                        value: 1,
                                    },
                                ],
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = 1;
a * a, a / a, a % a, a + a, a - a, a << a, a >> a, a >>> a, a < a, a > a, a <= a, a >= a,
a instanceof a, a in a, a == a, a != a, a === a, a !== a, a & a, a ^ a, a | a, a && a, a || a;
`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "BinaryExpression",
                                operator: "*",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "/",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "%",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "-",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<<",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">>",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">>>",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "instanceof",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "in",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "==",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "!=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "===",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "!==",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "^",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "|",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = 1;
a || a, a && a, a | a, a ^ a, a & a, a !== a, a === a, a != a, a == a, a in a, a instanceof a,
a >= a, a <= a, a > a, a < a, a >>> a, a >> a, a << a, a - a, a + a, a % a, a / a, a * a;
`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "|",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "^",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "!==",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "===",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "!=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "==",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "in",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "instanceof",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<=",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">>>",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: ">>",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "<<",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "-",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "%",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "/",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            {
                                type: "BinaryExpression",
                                operator: "*",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = 1;
a || a && a ? (a | a) +a  : ((a ^ a) & a) ? a + a - a + a + a : a === a ? ((a >>> a) | a) + a :
a !== a ? a % a : a != a ? a - a - a : a == a ? a * a * a : a in a ? a >> a >> a : a instanceof a ?
a << a << a : a >= a ? a / a / a : a <= a ? a % a % a : a > a ? a * a / a : a < a ?
(a >>> a) >> a << a - a + a % a / a * a : a;
`)).to.eql({
    /* tslint:disable max-line-length */
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ConditionalExpression",
                        test: {
                            type: "LogicalExpression",
                            operator: "||",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        },
                        consequent: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "BinaryExpression",
                                operator: "|",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            right: {
                                type: "Identifier",
                                name: "a",
                            },
                        },
                        alternate: {
                            type: "ConditionalExpression",
                            test: {
                                type: "BinaryExpression",
                                operator: "&",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "^",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            consequent: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "-",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                                right: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                            alternate: {
                                type: "ConditionalExpression",
                                test: {
                                    type: "BinaryExpression",
                                    operator: "===",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                                consequent: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "|",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: ">>>",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                                alternate: {
                                    type: "ConditionalExpression",
                                    test: {
                                        type: "BinaryExpression",
                                        operator: "!==",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                    consequent: {
                                        type: "BinaryExpression",
                                        operator: "%",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                    alternate: {
                                        type: "ConditionalExpression",
                                        test: {
                                            type: "BinaryExpression",
                                            operator: "!=",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        },
                                        consequent: {
                                            type: "BinaryExpression",
                                            operator: "-",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "-",
                                                left: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        },
                                        alternate: {
                                            type: "ConditionalExpression",
                                            test: {
                                                type: "BinaryExpression",
                                                operator: "==",
                                                left: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                            consequent: {
                                                type: "BinaryExpression",
                                                operator: "*",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "*",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                            alternate: {
                                                type: "ConditionalExpression",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "in",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                },
                                                consequent: {
                                                    type: "BinaryExpression",
                                                    operator: ">>",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: ">>",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                },
                                                alternate: {
                                                    type: "ConditionalExpression",
                                                    test: {
                                                        type: "BinaryExpression",
                                                        operator: "instanceof",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                    },
                                                    consequent: {
                                                        type: "BinaryExpression",
                                                        operator: "<<",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "<<",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                    },
                                                    alternate: {
                                                        type: "ConditionalExpression",
                                                        test: {
                                                            type: "BinaryExpression",
                                                            operator: ">=",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                        },
                                                        consequent: {
                                                            type: "BinaryExpression",
                                                            operator: "/",
                                                            left: {
                                                                type: "BinaryExpression",
                                                                operator: "/",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                        },
                                                        alternate: {
                                                            type: "ConditionalExpression",
                                                            test: {
                                                                type: "BinaryExpression",
                                                                operator: "<=",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                            },
                                                            consequent: {
                                                                type: "BinaryExpression",
                                                                operator: "%",
                                                                left: {
                                                                    type: "BinaryExpression",
                                                                    operator: "%",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                    right: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                            },
                                                            alternate: {
                                                                type: "ConditionalExpression",
                                                                test: {
                                                                    type: "BinaryExpression",
                                                                    operator: ">",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                    right: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                },
                                                                consequent: {
                                                                    type: "BinaryExpression",
                                                                    operator: "/",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "*",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "a",
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "a",
                                                                        },
                                                                    },
                                                                    right: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                },
                                                                alternate: {
                                                                    type: "ConditionalExpression",
                                                                    test: {
                                                                        type: "BinaryExpression",
                                                                        operator: "<",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "a",
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "a",
                                                                        },
                                                                    },
                                                                    consequent: {
                                                                        type: "BinaryExpression",
                                                                        operator: "<<",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: ">>",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: ">>>",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "a",
                                                                                },
                                                                                right: {
                                                                                    type: "Identifier",
                                                                                    name: "a",
                                                                                },
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "a",
                                                                            },
                                                                        },
                                                                        right: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "-",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "a",
                                                                                },
                                                                                right: {
                                                                                    type: "Identifier",
                                                                                    name: "a",
                                                                                },
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "*",
                                                                                left: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "/",
                                                                                    left: {
                                                                                        type: "BinaryExpression",
                                                                                        operator: "%",
                                                                                        left: {
                                                                                            type: "Identifier",
                                                                                            name: "a",
                                                                                        },
                                                                                        right: {
                                                                                            type: "Identifier",
                                                                                            name: "a",
                                                                                        },
                                                                                    },
                                                                                    right: {
                                                                                        type: "Identifier",
                                                                                        name: "a",
                                                                                    },
                                                                                },
                                                                                right: {
                                                                                    type: "Identifier",
                                                                                    name: "a",
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                    alternate: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
            /* tslint:enable max-line-length */
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = 1;
a = -a;
a = +a;
a = !a;
a = ~a;
a = ++a;
a = --a;
a = a++;
a = a--;
a = typeof a;
a = void a;
a = delete a;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "-",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "+",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "!",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "~",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "++",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "--",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "++",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: false,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "--",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: false,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "typeof",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "delete",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = 1;
a = -a;
a = +a;
a = !a;
a = ~a;
a = ++a;
a = --a;
a = a++;
a = a--;
a = typeof a;
a = void a;
a = delete a;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "-",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "+",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "!",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "~",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "++",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "--",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "++",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: false,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UpdateExpression",
                            operator: "--",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: false,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "typeof",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "delete",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                            prefix: true,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new A\"", () => {
        expect(parseScript(`new A`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "A",
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new A();\"", () => {
        expect(parseScript(`new A();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "A",
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new new A();\"", () => {
        expect(parseScript(`new new A();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "NewExpression",
                            callee: {
                                type: "Identifier",
                                name: "A",
                            },
                            arguments: [],
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new (a + b)();\"", () => {
        expect(parseScript(`new (a + b)();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a.b.c.d[e][f + g]();\"", () => {
        expect(parseScript(`a.b.c.d[e][f + g]();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: true,
                            object: {
                                type: "MemberExpression",
                                computed: true,
                                object: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                },
                                property: {
                                    type: "Identifier",
                                    name: "e",
                                },
                            },
                            property: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Identifier",
                                    name: "f",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "g",
                                },
                            },
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (i = 0, len = a.length; i < len; i++);\"", () => {
        expect(parseScript(`for (i = 0, len = a.length; i < len; i++);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "i",
                                },
                                right: {
                                    type: "Literal",
                                    value: 0,
                                },
                            },
                            {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "len",
                                },
                                right: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "length",
                                    },
                                },
                            },
                        ],
                    },
                    test: {
                        type: "BinaryExpression",
                        operator: "<",
                        left: {
                            type: "Identifier",
                            name: "i",
                        },
                        right: {
                            type: "Identifier",
                            name: "len",
                        },
                    },
                    update: {
                        type: "UpdateExpression",
                        operator: "++",
                        argument: {
                            type: "Identifier",
                            name: "i",
                        },
                        prefix: false,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (var a of b) {}\"", () => {
        expect(parseScript(`for (var a of b) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForOfStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    await: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (a of b) {}\"", () => {
        expect(parseScript(`for (a of b) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForOfStatement",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    await: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`a:
for (var i = 0; i < 10; i++) {
    for (var j = 0; j < 10; j++) {
        if (j === 1) {
            continue a;
        }
        if (j === 5) {
            break a;
        }
    }
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "LabeledStatement",
                    label: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "ForStatement",
                        init: {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "i",
                                    },
                                    init: {
                                        type: "Literal",
                                        value:  0,
                                    },
                                },
                            ],
                            kind: "var",
                        },
                        test: {
                            type: "BinaryExpression",
                            operator: "<",
                            left: {
                                type: "Identifier",
                                name: "i",
                            },
                            right: {
                                type: "Literal",
                                value:  10,
                            },
                        },
                        update: {
                            type: "UpdateExpression",
                            operator: "++",
                            argument: {
                                type: "Identifier",
                                name: "i",
                            },
                            prefix: false,
                        },
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ForStatement",
                                    init: {
                                        type: "VariableDeclaration",
                                        declarations: [
                                            {
                                                type: "VariableDeclarator",
                                                id: {
                                                    type: "Identifier",
                                                    name: "j",
                                                },
                                                init: {
                                                    type: "Literal",
                                                    value: 0,
                                                },
                                            },
                                        ],
                                        kind: "var",
                                    },
                                    test: {
                                        type: "BinaryExpression",
                                        operator: "<",
                                        left: {
                                            type: "Identifier",
                                            name: "j",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 10,
                                        },
                                    },
                                    update: {
                                        type: "UpdateExpression",
                                        operator: "++",
                                        argument: {
                                            type: "Identifier",
                                            name: "j",
                                        },
                                        prefix: false,
                                    },
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "j",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ContinueStatement",
                                                            label: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                        },
                                                    ],
                                                },
                                                alternate: null,
                                            },
                                            {
                                                type: "IfStatement",
                                                test: {
                                                    type: "BinaryExpression",
                                                    operator: "===",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "j",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 5,
                                                    },
                                                },
                                                consequent: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "BreakStatement",
                                                            label: {
                                                                type: "Identifier",
                                                                name: "a",
                                                            },
                                                        },
                                                    ],
                                                },
                                                alternate: null,
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    return
    1 + 1;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ReturnStatement",
                                argument: null,
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`try {
    throw new Error();
} catch (e) {
    throw e;
} finally {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ThrowStatement",
                                argument: {
                                    type: "NewExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "Error",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "Identifier",
                            name: "e",
                        },
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ThrowStatement",
                                    argument: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                            ],
                        },
                    },
                    finalizer: {
                        type: "BlockStatement",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`switch (a) {
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`switch (a) {
  case 1:
  case 2:
    break;
  default:
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [],
                        },
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 2,
                            },
                            consequent: [
                                {
                                    type: "BreakStatement",
                                    label: null,
                                },
                            ],
                        },
                        {
                            type: "SwitchCase",
                            test: null,
                            consequent: [],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`switch (a) {
  default:
    b++;
    break;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: null,
                            consequent: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "UpdateExpression",
                                        operator: "++",
                                        argument: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        prefix: false,
                                    },
                                },
                                {
                                    type: "BreakStatement",
                                    label: null,
                                },
                            ],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"do a(); while (0);\"", () => {
        expect(parseScript(`do a(); while (0);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DoWhileStatement",
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "a",
                            },
                            arguments: [],
                        },
                    },
                    test: {
                        type: "Literal",
                        value: 0,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"while (1);\"", () => {
        expect(parseScript(`while (1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`((a, b, c) => {
  return 1;
});`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "Identifier",
                                name: "c",
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ReturnStatement",
                                    argument: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            ],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = (a, b, c) => {
  return 1;
};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "ArrowFunctionExpression",
                                id: null,
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a({ a }) {}\"", () => {
        expect(parseScript(`function a({ a }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a({ a, b }) {}\"", () => {
        expect(parseScript(`function a({ a, b }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a({ a: A = 1 }) {}\"", () => {
        expect(parseScript(`function a({ a: A = 1 }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "A",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    /* tslint:disable max-line-length */
    it("should parse \"function a({ a: A = 1 + 1, b: { c: { d: D = 1 + 1, e: { f = 1 + 1 } } } }) {}\"", () => {
        expect(parseScript(`function a({ a: A = 1 + 1, b: { c: { d: D = 1 + 1, e: { f = 1 + 1 } } } }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "A",
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "ObjectPattern",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                computed: false,
                                                value: {
                                                    type: "ObjectPattern",
                                                    properties: [
                                                        {
                                                            type: "Property",
                                                            key: {
                                                                type: "Identifier",
                                                                name: "d",
                                                            },
                                                            computed: false,
                                                            value: {
                                                                type: "AssignmentPattern",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "D",
                                                                },
                                                                right: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "Literal",
                                                                        value: 1,
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 1,
                                                                    },
                                                                },
                                                            },
                                                            kind: "init",
                                                            method: false,
                                                            shorthand: false,
                                                        },
                                                        {
                                                            type: "Property",
                                                            key: {
                                                                type: "Identifier",
                                                                name: "e",
                                                            },
                                                            computed: false,
                                                            value: {
                                                                type: "ObjectPattern",
                                                                properties: [
                                                                    {
                                                                        type: "Property",
                                                                        key: {
                                                                            type: "Identifier",
                                                                            name: "f",
                                                                        },
                                                                        computed: false,
                                                                        value: {
                                                                            type: "AssignmentPattern",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "f",
                                                                            },
                                                                            right: {
                                                                                type: "BinaryExpression",
                                                                                operator: "+",
                                                                                left: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 1,
                                                                                },
                                                                            },
                                                                        },
                                                                        kind: "init",
                                                                        method: false,
                                                                        shorthand: true,
                                                                    },
                                                                ],
                                                            },
                                                            kind: "init",
                                                            method: false,
                                                            shorthand: false,
                                                        },
                                                    ],
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: false,
                                            },
                                        ],
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });
    /* tslint:enable max-line-length */

    it("should parse \"function a(a = 1, b = 2 + 3, c, ...d) {}\"", () => {
        expect(parseScript(`function a(a = 1, b = 2 + 3, c, ...d) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "AssignmentPattern",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                        {
                            type: "AssignmentPattern",
                            left: {
                                type: "Identifier",
                                name: "b",
                            },
                            right: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Literal",
                                    value: 2,
                                },
                                right: {
                                    type: "Literal",
                                    value: 3,
                                },
                            },
                        },
                        {
                            type: "Identifier",
                            name: "c",
                        },
                        {
                            type: "RestElement",
                            argument: {
                                type: "Identifier",
                                name: "d",
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a(...a) {}\"", () => {
        expect(parseScript(`function a(...a) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "RestElement",
                            argument: {
                                type: "Identifier",
                                name: "a",
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a(a = { b: function(c = 1, d = 2) {} }) {}\"", () => {
        expect(parseScript(`function a(a = { b: function(c = 1, d = 2) {} }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "AssignmentPattern",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [
                                                {
                                                    type: "AssignmentPattern",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "c",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                },
                                                {
                                                    type: "AssignmentPattern",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "d",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 2,
                                                    },
                                                },
                                            ],
                                            body: {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a([ a, b ]) {}\"", () => {
        expect(parseScript(`function a([ a, b ]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                                {
                                    type: "Identifier",
                                    name: "b",
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a([...a]) {}\"", () => {
        expect(parseScript(`function a([...a]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a([,]) {}\"", () => {
        expect(parseScript(`function a([,]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                null,
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a([,,]) {}\"", () => {
        expect(parseScript(`function a([,,]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                null,
                                null,
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a([ a = [ b = [c]], d,, ...e]) {}\"", () => {
        expect(parseScript(`function a([ a = [ b = [c]], d,, ...e]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "AssignmentPattern",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                right: {
                                                    type: "ArrayExpression",
                                                    elements: [
                                                        {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                },
                                {
                                    type: "Identifier",
                                    name: "d",
                                },
                                null,
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var {a, b} = o;\"", () => {
        expect(parseScript(`var {a, b} = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var {a: A, b: B} = o;\"", () => {
        expect(parseScript(`var {a: A, b: B} = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "A",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "B",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var {a: A, b: B = 1, c: { d }} = o;\"", () => {
        expect(parseScript(`var {a: A, b: B = 1, c: { d }} = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "A",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "AssignmentPattern",
                                            left: {
                                                type: "Identifier",
                                                name: "B",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "ObjectPattern",
                                            properties: [
                                                {
                                                    type: "Property",
                                                    key: {
                                                        type: "Identifier",
                                                        name: "d",
                                                    },
                                                    computed: false,
                                                    value: {
                                                        type: "Identifier",
                                                        name: "d",
                                                    },
                                                    kind: "init",
                                                    method: false,
                                                    shorthand: true,
                                                },
                                            ],
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [...a] = o;\"", () => {
        expect(parseScript(`var [...a] = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "RestElement",
                                        argument: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [,] = o;\"", () => {
        expect(parseScript(`var [,] = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    null,
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [,,] = o;\"", () => {
        expect(parseScript(`var [,,] = o;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    null,
                                    null,
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "o",
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[...a]\"", () => {
        expect(parseScript(`[...a]`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var o = {
            [a+b]: function *a() {}
        };`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "o",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        },
                                        computed: true,
                                        value: {
                                            type: "FunctionExpression",
                                            id: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            params: [],
                                            body: {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                            generator: true,
                                            expression: false,
                                            async: false,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var A = {
            set [a+b](a) {}
        }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "A",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        },
                                        computed: true,
                                        value: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [
                                                {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            ],
                                            body: {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                        kind: "set",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`class A {
  static *b() {}
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "A",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`class A {
  constructor() {}
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "A",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`class A {
  constructor() {}
  static b() {}
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "A",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function f([a, b, c] = []) {}\"", () => {
        expect(parseScript(`function f([a, b, c] = []) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "f",
                    },
                    params: [
                        {
                            type: "AssignmentPattern",
                            left: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                ],
                            },
                            right: {
                                type: "ArrayExpression",
                                elements: [],
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let [a] = [1];\"", () => {
        expect(parseScript(`let [a] = [1];`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "ArrayExpression",
                                elements: [
                                    {
                                        type: "Literal",
                                        value: 1,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function f({a, b, c} = {}) {}\"", () => {
        expect(parseScript(`function f({a, b, c} = {}) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "f",
                    },
                    params: [
                        {
                            type: "AssignmentPattern",
                            left: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                            right: {
                                type: "ObjectExpression",
                                properties: [],
                            },
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let [a] = [1];\"", () => {
        expect(parseScript(`let [a] = [1];`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "ArrayExpression",
                                elements: [
                                    {
                                        type: "Literal",
                                        value: 1,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let o = {a, b};\"", () => {
        expect(parseScript(`let o = {a, b};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "o",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ a: { b: { c = \"it worked\" } } } = { a: { b: {} } });\"", () => {
        expect(parseScript(`({ a: { b: { c = "it worked" } } } = { a: { b: {} } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "ObjectPattern",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                computed: false,
                                                value: {
                                                    type: "ObjectPattern",
                                                    properties: [
                                                        {
                                                            type: "Property",
                                                            key: {
                                                                type: "Identifier",
                                                                name: "c",
                                                            },
                                                            computed: false,
                                                            value: {
                                                                type: "AssignmentPattern",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "c",
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "it worked",
                                                                },
                                                            },
                                                            kind: "init",
                                                            method: false,
                                                            shorthand: true,
                                                        },
                                                    ],
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: false,
                                            },
                                        ],
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "ObjectExpression",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                computed: false,
                                                value: {
                                                    type: "ObjectExpression",
                                                    properties: [],
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: false,
                                            },
                                        ],
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"const f = x => x*x\"", () => {
        expect(parseScript(`const f = x => x*x`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "f",
                            },
                            init: {
                                type: "ArrowFunctionExpression",
                                id: null,
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "x",
                                    },
                                ],
                                body: {
                                    type: "BinaryExpression",
                                    operator: "*",
                                    left: {
                                        type: "Identifier",
                                        name: "x",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "x",
                                    },
                                },
                                generator: false,
                                expression: true,
                                async: false,
                            },
                        },
                    ],
                    kind: "const",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set false(a) { a } })\"", () => {
        expect(parseScript(`({ set false(a) { a } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "false",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set null(a) { a } })\"", () => {
        expect(parseScript(`({ set null(a) { a } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "null",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set 10(a) { a } })\"", () => {
        expect(parseScript(`({ set 10(a) { a } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: 10,
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ get: 1 })\"", () => {
        expect(parseScript(`({ get: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "get",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({\"__proto__\": 1 })\"", () => {
        expect(parseScript(`({"__proto__": 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ get a() { return a }, set a(a) { return a; } })\"", () => {
        expect(parseScript(`({ get a() { return a }, set a(a) { return a; } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ReturnStatement",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ReturnStatement",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a:1, get b(){}, set 3(c){}})\"", () => {
        expect(parseScript(`({a:1, get 'b'(){}, set 3(c){}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: 3,
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a, b})\"", () => {
        expect(parseScript(`({a, b})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class extends a { constructor() { super() } });\"", () => {
        expect(parseScript(`(class extends a { constructor() { super() } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "constructor",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Super",
                                                        },
                                                        arguments: [],
                                                    },
                                                },
                                            ],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "constructor",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { constructor() { super() } }\"", () => {
        expect(parseScript(`class a extends b { constructor() { super() } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Super",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { \"constructor\"() { super() } }\"", () => {
        expect(parseScript(`class a extends b { "constructor"() { super() } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Literal",
                                    value: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Super",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { constructor(c = super()){} }\"", () => {
        expect(parseScript(`class a extends b { constructor(c = super()){} }`)).to.eql({
            body: [
                {
                    body: {
                        body: [
                            {
                                computed: false,
                                key: {
                                    name: "constructor",
                                    type: "Identifier",
                                },
                                kind: "constructor",
                                static: false,
                                type: "MethodDefinition",
                                value: {
                                    async: false,
                                    body: {
                                        body: [],
                                        type: "BlockStatement",
                                    },
                                    expression: false,
                                    generator: false,
                                    id: null,
                                    params: [
                                        {
                                            left: {
                                                name: "c",
                                                type: "Identifier",
                                            },
                                            right: {
                                                arguments: [],
                                                callee: {
                                                    type: "Super",
                                                },
                                                type: "CallExpression",
                                            },
                                            type: "AssignmentPattern",
                                        },
                                    ],
                                    type: "FunctionExpression",
                                },
                            },
                        ],
                        type: "ClassBody",
                    },
                    id: {
                        name: "a",
                        type: "Identifier",
                    },
                    superClass: {
                        name: "b",
                        type: "Identifier",
                    },
                    type: "ClassDeclaration",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"class a extends b { constructor() { ({c: super()}); } }\"", () => {
        expect(parseScript(`class a extends b { constructor() { ({c: super()}); } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "ObjectExpression",
                                                    properties: [
                                                        {
                                                            type: "Property",
                                                            key: {
                                                                type: "Identifier",
                                                                name: "c",
                                                            },
                                                            computed: false,
                                                            value: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "Super",
                                                                },
                                                                arguments: [],
                                                            },
                                                            kind: "init",
                                                            method: false,
                                                            shorthand: false,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ a() { super.b(); } });\"", () => {
        expect(parseScript(`({ a() { super.b(); } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "b",
                                                        },
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ *a() { super.b = 1; } });\"", () => {
        expect(parseScript(`({ *a() { super.b = 1; } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "b",
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: true,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ get a() { super[1] = 2; } });\"", () => {
        expect(parseScript(`({ get a() { super[1] = 2; } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: true,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Literal",
                                                            value: 1,
                                                            raw: 1,
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 2,
                                                        raw: 2,
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set a(b) { super.c[1] = 2; } });\"", () => {
        expect(parseScript(`({ set a(b) { super.c[1] = 2; } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "MemberExpression",
                                                        computed: true,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: false,
                                                            object: {
                                                                type: "Super",
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "c",
                                                            },
                                                        },
                                                        property: {
                                                            type: "Literal",
                                                            value: 1,
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 2,
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class { constructor() { super.a } });\"", () => {
        expect(parseScript(`(class { constructor() { super.a } });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: null,
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "constructor",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                    },
                                                },
                                            ],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "constructor",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { constructor() { super.c } }\"", () => {
        expect(parseScript(`class a extends b { constructor() { super.c } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "MemberExpression",
                                                    computed: false,
                                                    object: {
                                                        type: "Super",
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "c",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a { b() { () => super.c; } }\"", () => {
        expect(parseScript(`class a { b() { () => super.c; } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "ArrowFunctionExpression",
                                                    id: null,
                                                    params: [],
                                                    body: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                    },
                                                    generator: false,
                                                    expression: true,
                                                    async: false,
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a { b() { new super.c; } }\"", () => {
        expect(parseScript(`class a { b() { new super.c; } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "NewExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a { b() { new super.c(); } }\"", () => {
        expect(parseScript(`class a { b() { new super.c(); } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "NewExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: false,
                                                        object: {
                                                            type: "Super",
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield true}\"", () => {
        expect(parseScript(`function *a(){yield true}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield false}\"", () => {
        expect(parseScript(`function *a(){yield false}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: false,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield \"a\"}\"", () => {
        expect(parseScript(`function *a(){yield "a"}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: "a",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield a}\"", () => {
        expect(parseScript(`function *a(){yield a}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield+1}\"", () => {
        expect(parseScript(`function *a(){yield+1}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "UnaryExpression",
                                        operator: "+",
                                        argument: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        prefix: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield-1}\"", () => {
        expect(parseScript(`function *a(){yield-1}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "UnaryExpression",
                                        operator: "-",
                                        argument: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        prefix: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a = 1, b = 2, c = 3\"", () => {
        expect(parseScript(`var a = 1, b = 2, c = 3`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "b",
                            },
                            init: {
                                type: "Literal",
                                value: 2,
                            },
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "c",
                            },
                            init: {
                                type: "Literal",
                                value: 3,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";yield\\na;});\"", () => {
        expect(parseScript(`function*a(){yield
a}`)).to.eql({
                type: "Program",
                body: [
                    {
                        type: "FunctionDeclaration",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "YieldExpression",
                                        argument: null,
                                        delegate: false,
                                    },
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                            ],
                        },
                        generator: true,
                        expression: false,
                        async: false,
                    },
                ],
                sourceType: "script",
            });
        });

    it("should parse \"({set a(yield){}})\"", () => {
        expect(parseScript(`({set a(yield){}})`)).to.eql({
            body: [
                {
                    expression: {
                        properties: [
                            {
                                computed: false,
                                key: {
                                    name: "a",
                                    type: "Identifier",
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                                type: "Property",
                                value: {
                                    async: false,
                                    body: {
                                        body: [],
                                        type: "BlockStatement",
                                    },
                                    expression: false,
                                    generator: false,
                                    id: null,
                                    params: [
                                        {
                                            name: "yield",
                                            type: "Identifier",
                                        },
                                    ],
                                    type: "FunctionExpression",
                                },
                            },
                        ],
                        type: "ObjectExpression",
                    },
                    type: "ExpressionStatement",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"function *a(){yield null}\"", () => {
        expect(parseScript(`function *a(){yield null}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: "null",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield 1}\"", () => {
        expect(parseScript(`function *a(){yield 1}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield true}\"", () => {
        expect(parseScript(`function *a(){yield true}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield false}\"", () => {
        expect(parseScript(`function *a(){yield false}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Literal",
                                        value: false,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield a}\"", () => {
        expect(parseScript(`function *a(){yield a}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a)++\"", () => {
        expect(parseScript(`(a)++`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "UpdateExpression",
                        operator: "++",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"{ function a(){} }\"", () => {
        expect(parseScript(`{ function a(){} }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "FunctionDeclaration",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"/**/\"", () => {
        expect(parseScript(` /**/`)).to.eql({
            type: "Program",
            body: [],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield ++a;}\"", () => {
        expect(parseScript(`function *a(){yield ++a;}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "UpdateExpression",
                                        operator: "++",
                                        argument: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        prefix: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"void (a)\"", () => {
        expect(parseScript(`void (a)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "UnaryExpression",
                        operator: "void",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(void a)\"", () => {
        expect(parseScript(`(void a)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "UnaryExpression",
                        operator: "void",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a) ? (b) : (c)\"", () => {
        expect(parseScript(`(a) ? (b) : (c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ConditionalExpression",
                        test: {
                            type: "Identifier",
                            name: "a",
                        },
                        consequent: {
                            type: "Identifier",
                            name: "b",
                        },
                        alternate: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let[a] = b;\"", () => {
        expect(parseScript(`let[a] = b;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"const[a] = b;\"", () => {
        expect(parseScript(`const[a] = b;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                    ],
                    kind: "const",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"{ function a(){} }\"", () => {
        expect(parseScript(`{ function a(){} }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "FunctionDeclaration",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var yield = function yield(){};\"", () => {
        expect(parseScript(`var yield = function yield(){};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "yield",
                            },
                            init: {
                                type: "FunctionExpression",
                                id: {
                                    type: "Identifier",
                                    name: "yield",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \";\"", () => {
        expect(parseScript(`;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "EmptyStatement",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(var a in [1,2]) 3\"", () => {
        expect(parseScript(`for(var a in [1,2]) 3`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    right: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "Literal",
                                value: 1,
                            },
                            {
                                type: "Literal",
                                value: 2,
                            },
                        ],
                    },
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Literal",
                            value: 3,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(let a in [1,2]) 3\"", () => {
        expect(parseScript(`for(let a in [1,2]) 3`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "let",
                    },
                    right: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "Literal",
                                value: 1,
                            },
                            {
                                type: "Literal",
                                value: 2,
                            },
                        ],
                    },
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Literal",
                            value: 3,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"0..a\"", () => {
        expect(parseScript(`0..a`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "MemberExpression",
                        computed: false,
                        object: {
                            type: "Literal",
                            value: 0,
                        },
                        property: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"01.a\"", () => {
        expect(parseScript(`01.a`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "MemberExpression",
                        computed: false,
                        object: {
                            type: "Literal",
                            value: 1,
                        },
                        property: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a[b](b,c)\"", () => {
        expect(parseScript(`a[b](b,c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: true,
                            object: {
                                type: "Identifier",
                                name: "a",
                            },
                            property: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "Identifier",
                                name: "c",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(new a).b()\"", () => {
        expect(parseScript(`(new a).b()`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "NewExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                arguments: [],
                            },
                            property: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a.b.c(1)\"", () => {
        expect(parseScript(`a.b.c(1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                            property: {
                                type: "Identifier",
                                name: "c",
                            },
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: 1,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`//
;a;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "EmptyStatement",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a + /* assignment */b ) * c\"", () => {
        expect(parseScript(`(a + /* assignment */b ) * c`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "*",
                        left: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        right: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { c() { [super.d] = e } }\"", () => {
        expect(parseScript(`class a extends b { c() { [super.d] = e } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "ArrayPattern",
                                                        elements: [
                                                            {
                                                                type: "MemberExpression",
                                                                computed: false,
                                                                object: {
                                                                    type: "Super",
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "d",
                                                                },
                                                            },
                                                        ],
                                                    },
                                                    right: {
                                                        type: "Identifier",
                                                        name: "e",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a, b\"", () => {
        expect(parseScript(`a, b`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                            {
                                type: "Identifier",
                                name: "b",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"null && (a += null)\"", () => {
        expect(parseScript(`null && (a += null)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "LogicalExpression",
                        operator: "&&",
                        left: {
                            type: "Literal",
                            value: "null",
                        },
                        right: {
                            type: "AssignmentExpression",
                            operator: "+=",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Literal",
                                value: "null",
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){ () => yield; }\"", () => {
        expect(parseScript(`function* a(){ () => yield; }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "ArrowFunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    generator: false,
                                    expression: true,
                                    async: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"\u0061\"", () => {
        expect(parseScript(`\u0061`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({get __proto__() {}})\"", () => {
        expect(parseScript(`({get __proto__() {}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({get __proto__() {}, set __proto__(a) {}})\"", () => {
        expect(parseScript(`({get __proto__() {}, set __proto__(a) {}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({[\"a\"+1]:\"b\"})\"", () => {
        expect(parseScript(`({["a"+1]:"b"})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Literal",
                                        value: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                                computed: true,
                                value: {
                                    type: "Literal",
                                    value: "b",
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"b: while (1) { continue  a; }\"", () => {
        expect(parseScript(`b: while (1) { continue  a; }`)).to.eql({
            body: [
                {
                    body: {
                        body: {
                            body: [
                                {
                                    label: {
                                        name: "a",
                                        type: "Identifier",
                                    },
                                    type: "ContinueStatement",
                                },
                            ],
                            type: "BlockStatement",
                        },
                        test: {
                            type: "Literal",
                            value: 1,
                        },
                        type: "WhileStatement",
                    },
                    label: {
                        name: "b",
                        type: "Identifier",
                    },
                    type: "LabeledStatement",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"debugger\"", () => {
        expect(parseScript(`debugger`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DebuggerStatement",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"do ; while (true)\"", () => {
        expect(parseScript(`do ; while (true)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DoWhileStatement",
                    body: {
                        type: "EmptyStatement",
                    },
                    test: {
                        type: "Literal",
                        value: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"do ; while (true)\"", () => {
        expect(parseScript(`do {} while (true)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DoWhileStatement",
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    test: {
                        type: "Literal",
                        value: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"{do ; while(false); false}\"", () => {
        expect(parseScript(`{do ; while(false); false}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "DoWhileStatement",
                            body: {
                                type: "EmptyStatement",
                            },
                            test: {
                                type: "Literal",
                                value: false,
                            },
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "Literal",
                                value: false,
                            },
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(var a in b);\"", () => {
        expect(parseScript(`for(var a in b);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for({a=1} in b);\"", () => {
        expect(parseScript(`for({a=1} in b);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "ObjectPattern",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "AssignmentPattern",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                        ],
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"if (a) function b(){}\"", () => {
        expect(parseScript(`if (a) function b(){}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "FunctionDeclaration",
                        id: {
                            type: "Identifier",
                            name: "b",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                    alternate: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(var a of b);\"", () => {
        expect(parseScript(`for(var a of b);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForOfStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                    await: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(const a of b);\"", () => {
        expect(parseScript(`for(const a of b);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForOfStatement",
                    left: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "const",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                    await: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(a; a < 1; a++) b(a);\"", () => {
        expect(parseScript(`for(a; a < 1; a++) b(a);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "Identifier",
                        name: "a",
                    },
                    test: {
                        type: "BinaryExpression",
                        operator: "<",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                    update: {
                        type: "UpdateExpression",
                        operator: "++",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: false,
                    },
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(a; a < 1; a++);\"", () => {
        expect(parseScript(`for(a; a < 1; a++);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "Identifier",
                        name: "a",
                    },
                    test: {
                        type: "BinaryExpression",
                        operator: "<",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                    update: {
                        type: "UpdateExpression",
                        operator: "++",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: false,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(var a = 1;b;c);\"", () => {
        expect(parseScript(`for(var a = 1;b;c);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: {
                                    type: "Literal",
                                    value: 1,
                                },
                            },
                        ],
                        kind: "var",
                    },
                    test: {
                        type: "Identifier",
                        name: "b",
                    },
                    update: {
                        type: "Identifier",
                        name: "c",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(a;b;c);\"", () => {
        expect(parseScript(`for(a;b;c);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "Identifier",
                        name: "a",
                    },
                    test: {
                        type: "Identifier",
                        name: "b",
                    },
                    update: {
                        type: "Identifier",
                        name: "c",
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a:{break a;}\"", () => {
        expect(parseScript(`a:{break a;}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "LabeledStatement",
                    label: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "BreakStatement",
                                label: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"if(a)b;\"", () => {
        expect(parseScript(`if(a)b;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                    alternate: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(let a;;);\"", () => {
        expect(parseScript(`for(let a;;);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "let",
                    },
                    test: null,
                    update: null,
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a => { return 1; }\"", () => {
        expect(parseScript(`a => { return 1; }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ReturnStatement",
                                    argument: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            ],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"switch(a){case 1:}\"", () => {
        expect(parseScript(`switch(a){case 1:}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"switch (a) { case 1: let b; }\"", () => {
        expect(parseScript(`switch (a) { case 1: let b; }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [
                                {
                                    type: "VariableDeclaration",
                                    declarations: [
                                        {
                                            type: "VariableDeclarator",
                                            id: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            init: null,
                                        },
                                    ],
                                    kind: "let",
                                },
                            ],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"switch(a){case 1:default:case 2:}\"", () => {
        expect(parseScript(`switch(a){case 1:default:case 2:}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [],
                        },
                        {
                            type: "SwitchCase",
                            test: null,
                            consequent: [],
                        },
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 2,
                            },
                            consequent: [],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"switch(a){case 1:default:}\"", () => {
        expect(parseScript(`switch(a){case 1:default:}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [],
                        },
                        {
                            type: "SwitchCase",
                            test: null,
                            consequent: [],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"switch(a){default:case 1:}\"", () => {
        expect(parseScript(`switch(a){default:case 1:}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "SwitchStatement",
                    discriminant: {
                        type: "Identifier",
                        name: "a",
                    },
                    cases: [
                        {
                            type: "SwitchCase",
                            test: null,
                            consequent: [],
                        },
                        {
                            type: "SwitchCase",
                            test: {
                                type: "Literal",
                                value: 1,
                            },
                            consequent: [],
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"throw this\"", () => {
        expect(parseScript(`throw this`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ThrowStatement",
                    argument: {
                        type: "ThisExpression",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"throw {}\"", () => {
        expect(parseScript(`throw {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ThrowStatement",
                    argument: {
                        type: "ObjectExpression",
                        properties: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try{}catch(a){}\"", () => {
        expect(parseScript(`try{}catch(a){}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try { } catch (a) { let b; }\"", () => {
        expect(parseScript(`try { } catch (a) { let b; }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "VariableDeclaration",
                                    declarations: [
                                        {
                                            type: "VariableDeclarator",
                                            id: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            init: null,
                                        },
                                    ],
                                    kind: "let",
                                },
                            ],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try{}catch(a){}finally{}\"", () => {
        expect(parseScript(`try{}catch(a){}finally{}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: {
                        type: "BlockStatement",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"do a(); while (true);\"", () => {
        expect(parseScript(`do a(); while (true);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DoWhileStatement",
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "a",
                            },
                            arguments: [],
                        },
                    },
                    test: {
                        type: "Literal",
                        value: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let a, x;\"", () => {
        expect(parseScript(`let a, x;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "x",
                            },
                            init: null,
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let xÇ•, x\u{E01D5}\"", () => {
        expect(parseScript(`let xÇ•, x\u{E01D5}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "xÇ•",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "xó ‡•",
                            },
                            init: null,
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var static;\"", () => {
        expect(parseScript(`var static;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "static",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(let[a])\"", () => {
        expect(parseScript(`(let[a])`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "MemberExpression",
                        computed: true,
                        object: {
                            type: "Identifier",
                            name: "let",
                        },
                        property: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"while(1);\"", () => {
        expect(parseScript(`while(1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"with(1);\"", () => {
        expect(parseScript(`with(1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WithStatement",
                    object: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"with (a) { b }\"", () => {
        expect(parseScript(`with (a) { b }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WithStatement",
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`/*@ngInject*/
function a(b) {
    return b;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`/*@ngInject*/
var a = function(b) {
    return b;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "FunctionExpression",
                                id: null,
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`a = [1,,];
b = [2, 3, c];
d = [4, , 5, ];
e = [6, c, 7];`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ArrayExpression",
                            elements: [
                                {
                                    type: "Literal",
                                    value: 1,
                                },
                                null,
                            ],
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "b",
                        },
                        right: {
                            type: "ArrayExpression",
                            elements: [
                                {
                                    type: "Literal",
                                    value: 2,
                                },
                                {
                                    type: "Literal",
                                    value: 3,
                                },
                                {
                                    type: "Identifier",
                                    name: "c",
                                },
                            ],
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "d",
                        },
                        right: {
                            type: "ArrayExpression",
                            elements: [
                                {
                                    type: "Literal",
                                    value: 4,
                                },
                                null,
                                {
                                    type: "Literal",
                                    value: 5,
                                },
                            ],
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "e",
                        },
                        right: {
                            type: "ArrayExpression",
                            elements: [
                                {
                                    type: "Literal",
                                    value: 6,
                                },
                                {
                                    type: "Identifier",
                                    name: "c",
                                },
                                {
                                    type: "Literal",
                                    value: 7,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = [ "b", "c", "d" ].e("");
var f = [ "b", "c", "d" ].e();
var g = [ "b", 1, 2, 3, "c" ].e("");
var h = [ i(), "b", 4, 5, 6, "c", c() ].e("");
var j = [ i(), c(), "b", 7, 8, 9, "c", c() ].e("");
var k = [ 10, 11, "b", "c", d() ].e("");
var l = [ "b", 12 + 13 + "c", "d" ].e("m");
var n = [].e(b + c);
var o = [].e("");
var p = [].e("b");`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                            {
                                                type: "Literal",
                                                value: "d",
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "f",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                            {
                                                type: "Literal",
                                                value: "d",
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "g",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: 1,
                                            },
                                            {
                                                type: "Literal",
                                                value: 2,
                                            },
                                            {
                                                type: "Literal",
                                                value: 3,
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "h",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "i",
                                                },
                                                arguments: [],
                                            },
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: 4,
                                            },
                                            {
                                                type: "Literal",
                                                value: 5,
                                            },
                                            {
                                                type: "Literal",
                                                value: 6,
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "j",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "i",
                                                },
                                                arguments: [],
                                            },
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: 7,
                                            },
                                            {
                                                type: "Literal",
                                                value: 8,
                                            },
                                            {
                                                type: "Literal",
                                                value: 9,
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "k",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Literal",
                                                value: 10,
                                            },
                                            {
                                                type: "Literal",
                                                value: 11,
                                            },
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "Literal",
                                                value: "c",
                                            },
                                            {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                arguments: [],
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "l",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            {
                                                type: "BinaryExpression",
                                                operator: "+",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "+",
                                                    left: {
                                                        type: "Literal",
                                                        value: 12,
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 13,
                                                    },
                                                },
                                                right: {
                                                    type: "Literal",
                                                    value: "c",
                                                },
                                            },
                                            {
                                                type: "Literal",
                                                value: "d",
                                            },
                                        ],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "m",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "n",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "o",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "p",
                            },
                            init: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "ArrayExpression",
                                        elements: [],
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "b",
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"{ do { } while (false);false }\"", () => {
        expect(parseScript(`{ do { } while (false);false }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "DoWhileStatement",
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            test: {
                                type: "Literal",
                                value: false,
                            },
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "Literal",
                                value: false,
                            },
                        },
                    ],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse asm.js code", () => {
        expect(parseScript(`// adapted from http://asmjs.org/spec/latest/
function a(b, c, d) {
  "use asm";
  var e = b.f.e;
  var g = b.f.g;
  var h = new b.i(d);
  function j(k, l) {
    k = k|1;
    l = l|2;
    var m = 0.0, n = 3, o = 4;
    // asm.js forces byte addressing of the heap by requiring shifting by 3
    for (n = k << 5, o = l << 6; (n|7) < (o|8); n = (n + 9)|10) {
      m = m + +g(h[n>>11]);
    }
    return +m;
  }
  function p(k, l) {
    k = k|12;
    l = l|13;
    return +e(+j(k, l) / +((l - k)|14));
  }
  return { p: p };
}
function q(b, c, d) {
  var e = b.f.e;
  var g = b.f.g;
  var h = new b.i(d);
  function j(k, l) {
    k = k|15;
    l = l|16;
    var m = 0.0, n = 17, o = 18;
    // asm.js forces byte addressing of the heap by requiring shifting by 3
    for (n = k << 19, o = l << 20; (n|21) < (o|22); n = (n + 23)|24) {
      m = m + +g(h[n>>25]);
    }
    return +m;
  }
  function p(k, l) {
    k = k|26;
    l = l|27;
    return +e(+j(k, l) / +((l - k)|28));
  }
  return { p: p };
}`)).to.eql({
        /* tslint:disable max-line-length */
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                        {
                            type: "Identifier",
                            name: "c",
                        },
                        {
                            type: "Identifier",
                            name: "d",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "Literal",
                                    value: "use asm",
                                },
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        init: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "f",
                                                },
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "e",
                                            },
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "g",
                                        },
                                        init: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "f",
                                                },
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "g",
                                            },
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "h",
                                        },
                                        init: {
                                            type: "NewExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "i",
                                                },
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                            ],
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "j",
                                },
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "k",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "l",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "k",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "k",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "l",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "l",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 2,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "m",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 0,
                                                    },
                                                },
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "n",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 3,
                                                    },
                                                },
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "o",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 4,
                                                    },
                                                },
                                            ],
                                            kind: "var",
                                        },
                                        {
                                            type: "ForStatement",
                                            init: {
                                                type: "SequenceExpression",
                                                expressions: [
                                                    {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "n",
                                                        },
                                                        right: {
                                                            type: "BinaryExpression",
                                                            operator: "<<",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "k",
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: 5,
                                                            },
                                                        },
                                                    },
                                                    {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "o",
                                                        },
                                                        right: {
                                                            type: "BinaryExpression",
                                                            operator: "<<",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "l",
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: 6,
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                            test: {
                                                type: "BinaryExpression",
                                                operator: "<",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "n",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value:  7,
                                                    },
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "o",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 8,
                                                    },
                                                },
                                            },
                                            update: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "n",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "n",
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 9,
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 10,
                                                    },
                                                },
                                            },
                                            body: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "AssignmentExpression",
                                                            operator: "=",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "m",
                                                            },
                                                            right: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "m",
                                                                },
                                                                right: {
                                                                    type: "UnaryExpression",
                                                                    operator: "+",
                                                                    argument: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "g",
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "MemberExpression",
                                                                                computed: true,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "h",
                                                                                },
                                                                                property: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: ">>",
                                                                                    left: {
                                                                                        type: "Identifier",
                                                                                        name: "n",
                                                                                    },
                                                                                    right: {
                                                                                        type: "Literal",
                                                                                        value: 11,
                                                                                    },
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    prefix: true,
                                                                },
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "UnaryExpression",
                                                operator: "+",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "m",
                                                },
                                                prefix: true,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "p",
                                },
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "k",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "l",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "k",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "k",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 12,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "l",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "l",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 13,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "UnaryExpression",
                                                operator: "+",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "e",
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "/",
                                                            left: {
                                                                type: "UnaryExpression",
                                                                operator: "+",
                                                                argument: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "Identifier",
                                                                        name: "j",
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "k",
                                                                        },
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "l",
                                                                        },
                                                                    ],
                                                                },
                                                                prefix: true,
                                                            },
                                                            right: {
                                                                type: "UnaryExpression",
                                                                operator: "+",
                                                                argument: {
                                                                    type: "BinaryExpression",
                                                                    operator: "|",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "-",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "l",
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "k",
                                                                        },
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 14,
                                                                    },
                                                                },
                                                                prefix: true,
                                                            },
                                                        },
                                                    ],
                                                },
                                                prefix: true,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "ObjectExpression",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "p",
                                            },
                                            computed: false,
                                            value: {
                                                type: "Identifier",
                                                name: "p",
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: false,
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "q",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                        {
                            type: "Identifier",
                            name: "c",
                        },
                        {
                            type: "Identifier",
                            name: "d",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        init: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "f",
                                                },
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "e",
                                            },
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "g",
                                        },
                                        init: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "f",
                                                },
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "g",
                                            },
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "h",
                                        },
                                        init: {
                                            type: "NewExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: false,
                                                object: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "i",
                                                },
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                            ],
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "j",
                                },
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "k",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "l",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "k",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "k",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 15,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "l",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "l",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 16,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "m",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 0,
                                                    },
                                                },
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "n",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 17,
                                                    },
                                                },
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "o",
                                                    },
                                                    init: {
                                                        type: "Literal",
                                                        value: 18,
                                                    },
                                                },
                                            ],
                                            kind: "var",
                                        },
                                        {
                                            type: "ForStatement",
                                            init: {
                                                type: "SequenceExpression",
                                                expressions: [
                                                    {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "n",
                                                        },
                                                        right: {
                                                            type: "BinaryExpression",
                                                            operator: "<<",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "k",
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: 19,
                                                            },
                                                        },
                                                    },
                                                    {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "o",
                                                        },
                                                        right: {
                                                            type: "BinaryExpression",
                                                            operator: "<<",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "l",
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: 20,
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                            test: {
                                                type: "BinaryExpression",
                                                operator: "<",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "n",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 21,
                                                    },
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "o",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 22,
                                                    },
                                                },
                                            },
                                            update: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "n",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "n",
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 23,
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 24,
                                                    },
                                                },
                                            },
                                            body: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "AssignmentExpression",
                                                            operator: "=",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "m",
                                                            },
                                                            right: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "m",
                                                                },
                                                                right: {
                                                                    type: "UnaryExpression",
                                                                    operator: "+",
                                                                    argument: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "Identifier",
                                                                            name: "g",
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "MemberExpression",
                                                                                computed: true,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "h",
                                                                                },
                                                                                property: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: ">>",
                                                                                    left: {
                                                                                        type: "Identifier",
                                                                                        name: "n",
                                                                                    },
                                                                                    right: {
                                                                                        type: "Literal",
                                                                                        value: 25,
                                                                                    },
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    prefix: true,
                                                                },
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "UnaryExpression",
                                                operator: "+",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "m",
                                                },
                                                prefix: true,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "p",
                                },
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "k",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "l",
                                    },
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "k",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "k",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 26,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "l",
                                                },
                                                right: {
                                                    type: "BinaryExpression",
                                                    operator: "|",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "l",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 27,
                                                    },
                                                },
                                            },
                                        },
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "UnaryExpression",
                                                operator: "+",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "e",
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "/",
                                                            left: {
                                                                type: "UnaryExpression",
                                                                operator: "+",
                                                                argument: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "Identifier",
                                                                        name: "j",
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "k",
                                                                        },
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "l",
                                                                        },
                                                                    ],
                                                                },
                                                                prefix: true,
                                                            },
                                                            right: {
                                                                type: "UnaryExpression",
                                                                operator: "+",
                                                                argument: {
                                                                    type: "BinaryExpression",
                                                                    operator: "|",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "-",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "l",
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "k",
                                                                        },
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: 28,
                                                                    },
                                                                },
                                                                prefix: true,
                                                            },
                                                        },
                                                    ],
                                                },
                                                prefix: true,
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "ObjectExpression",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "p",
                                            },
                                            computed: false,
                                            value: {
                                                type: "Identifier",
                                                name: "p",
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: false,
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
            /* tslint:enable max-line-length */
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    if (b) {
        let c;
        let d;
        var e;
        var f;
    }
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "c",
                                                    },
                                                    init: null,
                                                },
                                            ],
                                            kind: "let",
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "d",
                                                    },
                                                    init: null,
                                                },
                                            ],
                                            kind: "let",
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "e",
                                                    },
                                                    init: null,
                                                },
                                            ],
                                            kind: "var",
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "f",
                                                    },
                                                    init: null,
                                                },
                                            ],
                                            kind: "var",
                                        },
                                    ],
                                },
                                alternate: null,
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`{;}
a();
{};
{
    {};
};
b();
{}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "EmptyStatement",
                        },
                    ],
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [],
                    },
                },
                {
                    type: "BlockStatement",
                    body: [],
                },
                {
                    type: "EmptyStatement",
                },
                {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "BlockStatement",
                            body: [],
                        },
                        {
                            type: "EmptyStatement",
                        },
                    ],
                },
                {
                    type: "EmptyStatement",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "b",
                        },
                        arguments: [],
                    },
                },
                {
                    type: "BlockStatement",
                    body: [],
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`// 1.
if (a) {
    {{{}}}
    if (b) { c(); }
    {{}}
} else {
    d();
}

// 2.
if (a) {
    for (var e = 1; e < 2; ++e)
        if (b) c();
} else {
    d();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                alternate: null,
                            },
                            {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                ],
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ForStatement",
                                init: {
                                    type: "VariableDeclaration",
                                    declarations: [
                                        {
                                            type: "VariableDeclarator",
                                            id: {
                                                type: "Identifier",
                                                name: "e",
                                            },
                                            init: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                    ],
                                    kind: "var",
                                },
                                test: {
                                    type: "BinaryExpression",
                                    operator: "<",
                                    left: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 2,
                                    },
                                },
                                update: {
                                    type: "UpdateExpression",
                                    operator: "++",
                                    argument: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    prefix: true,
                                },
                                body: {
                                    type: "IfStatement",
                                    test: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    consequent: {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "c",
                                            },
                                            arguments: [],
                                        },
                                    },
                                    alternate: null,
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = "b" + "c" + d() + "e" + "b" + f() + "d" + "f" + "g" + h();
var i = "b" + 1 + d() + 2 + "j";
var k = 3 + d() + 4 + "j";

// this CAN'T safely be shortened to 1 + x() + "5boo"
var l = 5 + d() + 6 + 7 + "j";

var m = 8 + d() + 9 + "n" + 10 + "j";`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "+",
                                                left: {
                                                    type: "BinaryExpression",
                                                    operator: "+",
                                                    left: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Literal",
                                                                    value: "b",
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: "c",
                                                                },
                                                            },
                                                            right: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "d",
                                                                },
                                                                arguments: [],
                                                            },
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: "e",
                                                        },
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: "b",
                                                    },
                                                },
                                                right: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "f",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                            right: {
                                                type: "Literal",
                                                value: "d",
                                            },
                                        },
                                        right: {
                                            type: "Literal",
                                            value: "f",
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "g",
                                    },
                                },
                                right: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "h",
                                    },
                                    arguments: [],
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "i",
                            },
                            init: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "b",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "d",
                                            },
                                            arguments: [],
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 2,
                                    },
                                },
                                right: {
                                    type: "Literal",
                                    value: "j",
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "k",
                            },
                            init: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 3,
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "d",
                                            },
                                            arguments: [],
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 4,
                                    },
                                },
                                right: {
                                    type: "Literal",
                                    value: "j",
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "l",
                            },
                            init: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: 5,
                                            },
                                            right: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                arguments: [],
                                            },
                                        },
                                        right: {
                                            type: "Literal",
                                            value:  6,
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value:  7,
                                    },
                                },
                                right: {
                                    type: "Literal",
                                    value: "j",
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "m",
                            },
                            init: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "+",
                                                left: {
                                                    type: "Literal",
                                                    value:  8,
                                                },
                                                right: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "d",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 9,
                                            },
                                        },
                                        right: {
                                            type: "Literal",
                                            value: "n",
                                        },
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 10,
                                    },
                                },
                                right: {
                                    type: "Literal",
                                    value: "j",
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`if (a) b();
if (!a); else b();
if (a); else b();
if (a); else;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [],
                        },
                    },
                    alternate: null,
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "UnaryExpression",
                        operator: "!",
                        argument: {
                            type: "Identifier",
                            name: "a",
                        },
                        prefix: true,
                    },
                    consequent: {
                        type: "EmptyStatement",
                    },
                    alternate: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [],
                        },
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "EmptyStatement",
                    },
                    alternate: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [],
                        },
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "EmptyStatement",
                    },
                    alternate: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`if (a) {
    b();
} else if (c) {
    d();
} else if (e) {
    f();
}

if (a) {
    b();
} else if (c) {
    d();
} else if (e) {
    f();
} else {
    g();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "c",
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        arguments: [],
                                    },
                                },
                            ],
                        },
                        alternate: {
                            type: "IfStatement",
                            test: {
                                type: "Identifier",
                                name: "e",
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "f",
                                            },
                                            arguments: [],
                                        },
                                    },
                                ],
                            },
                            alternate: null,
                        },
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "c",
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        arguments: [],
                                    },
                                },
                            ],
                        },
                        alternate: {
                            type: "IfStatement",
                            test: {
                                type: "Identifier",
                                name: "e",
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "f",
                                            },
                                            arguments: [],
                                        },
                                    },
                                ],
                            },
                            alternate: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "g",
                                            },
                                            arguments: [],
                                        },
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a, b;
if (a && !(a + 1) && b) { // 1
    var c;
    d();
} else {
    e();
}

if (a || !!(a + 1) || b) { // 2
    d();
} else {
    var f;
    e();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "b",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "LogicalExpression",
                        operator: "&&",
                        left: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "UnaryExpression",
                                operator: "!",
                                argument: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                                prefix: true,
                            },
                        },
                        right: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "LogicalExpression",
                        operator: "||",
                        left: {
                            type: "LogicalExpression",
                            operator: "||",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "UnaryExpression",
                                operator: "!",
                                argument: {
                                    type: "UnaryExpression",
                                    operator: "!",
                                    argument: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                    prefix: true,
                                },
                                prefix: true,
                            },
                        },
                        right: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "f",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`if (a && b) {
    c(a)[1].b.d = e();
} else
    c(a)[2].b.d = f();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "LogicalExpression",
                        operator: "&&",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "MemberExpression",
                                                computed: true,
                                                object: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "c",
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "a",
                                                        },
                                                    ],
                                                },
                                                property: {
                                                    type: "Literal",
                                                    value:  1,
                                                },
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                    },
                                    right: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        arguments: [],
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "AssignmentExpression",
                            operator: "=",
                            left: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "MemberExpression",
                                        computed: true,
                                        object: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "c",
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            ],
                                        },
                                        property: {
                                            type: "Literal",
                                            value: 2,
                                        },
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                },
                                property: {
                                    type: "Identifier",
                                    name: "d",
                                },
                            },
                            right: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "f",
                                },
                                arguments: [],
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    if (b) return;
    c();
    d();
}
function e() {
    if (b) return;
    if (c) return;
    if (d) return;
    if (f) return;
    g();
    h();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "ReturnStatement",
                                    argument: null,
                                },
                                alternate: null,
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "e",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "ReturnStatement",
                                    argument: null,
                                },
                                alternate: null,
                            },
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                consequent: {
                                    type: "ReturnStatement",
                                    argument: null,
                                },
                                alternate: null,
                            },
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "d",
                                },
                                consequent: {
                                    type: "ReturnStatement",
                                    argument: null,
                                },
                                alternate: null,
                            },
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "f",
                                },
                                consequent: {
                                    type: "ReturnStatement",
                                    argument: null,
                                },
                                alternate: null,
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "g",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "h",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a;
if (!b && !c && !d && !e) {
    a = 1;
} else {
    a = 2;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "LogicalExpression",
                        operator: "&&",
                        left: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "UnaryExpression",
                                    operator: "!",
                                    argument: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    prefix: true,
                                },
                                right: {
                                    type: "UnaryExpression",
                                    operator: "!",
                                    argument: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    prefix: true,
                                },
                            },
                            right: {
                                type: "UnaryExpression",
                                operator: "!",
                                argument: {
                                    type: "Identifier",
                                    name: "d",
                                },
                                prefix: true,
                            },
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "!",
                            argument: {
                                type: "Identifier",
                                name: "e",
                            },
                            prefix: true,
                        },
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 2,
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a; // if undeclared it's assumed to have side-effects
if (b()) {
    a(c);
} else {
    a(d);
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "b",
                        },
                        arguments: [],
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a, b;
if (c()) {
    a = new b(1);
} else {
    a = new b(2);
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "b",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "c",
                        },
                        arguments: [],
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "NewExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "NewExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: 2,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`if (a()) {
    if (b()) {
        c();
    } else {
        d();
    }
} else {
    d();
}

if (a()) {
    if (b()) {
        c();
    }
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "IfStatement",
                    test: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [],
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    arguments: [],
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                alternate: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [],
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    arguments: [],
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                alternate: null,
                            },
                        ],
                    },
                    alternate: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a, b, c, d, e;
// compress these
if (b) {
    a = 1+2;
} else {
    a = 3;
}

if (b) {
    a = 4+5;
} else if (c) {
    a = 6;
} else {
    a = 7-8;
}

a = b ? 'f' : 'g'+'h';

a = b ? 'f' : b ? 'f' : 'g'+'h';

// Compress conditions that have side effects
if (i()) {
    a = 9+10;
} else {
    a = 11;
}

if (c) {
    a = 'j';
} else if (i()) {
    a = 'k'+'l';
} else {
    a = 'j';
}

a = i() ? 'm' : 'f'+'n';

// don't compress these
a = b ? d : e;

a = b ? 'f' : 'g';`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "b",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "c",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "d",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "e",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "b",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 2,
                                        },
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                },
                            },
                        ],
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "b",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 4,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 5,
                                        },
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "c",
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 6,
                                        },
                                    },
                                },
                            ],
                        },
                        alternate: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "-",
                                            left: {
                                                type: "Literal",
                                                value: 7,
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 8,
                                            },
                                        },
                                    },
                                },
                            ],
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "Identifier",
                                name: "b",
                            },
                            consequent: {
                                type: "Literal",
                                value: "f",
                            },
                            alternate: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Literal",
                                    value: "g",
                                },
                                right: {
                                    type: "Literal",
                                    value: "h",
                                },
                            },
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "Identifier",
                                name: "b",
                            },
                            consequent: {
                                type: "Literal",
                                value: "f",
                            },
                            alternate: {
                                type: "ConditionalExpression",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "Literal",
                                    value: "f",
                                },
                                alternate: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Literal",
                                        value: "g",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "h",
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "i",
                        },
                        arguments: [],
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 9,
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 10,
                                        },
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 11,
                                    },
                                },
                            },
                        ],
                    },
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "c",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "j",
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "IfStatement",
                        test: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "i",
                            },
                            arguments: [],
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "k",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: "l",
                                            },
                                        },
                                    },
                                },
                            ],
                        },
                        alternate: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: "j",
                                        },
                                    },
                                },
                            ],
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "i",
                                },
                                arguments: [],
                            },
                            consequent: {
                                type: "Literal",
                                value: "m",
                            },
                            alternate: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Literal",
                                    value: "f",
                                },
                                right: {
                                    type: "Literal",
                                    value: "n",
                                },
                            },
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "Identifier",
                                name: "b",
                            },
                            consequent: {
                                type: "Identifier",
                                name: "d",
                            },
                            alternate: {
                                type: "Identifier",
                                name: "e",
                            },
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ConditionalExpression",
                            test: {
                                type: "Identifier",
                                name: "b",
                            },
                            consequent: {
                                type: "Literal",
                                value: "f",
                            },
                            alternate: {
                                type: "Literal",
                                value: "g",
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a;
// access to global should be assumed to have side effects
if (b) {
    a = 1+2;
} else {
    a = 3;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "b",
                    },
                    consequent: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        right: {
                                            type: "Literal",
                                            value:  2,
                                        },
                                    },
                                },
                            },
                        ],
                    },
                    alternate: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 3,
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`  function a() {
            b();
            c();
            d = 1;
            return;
            if (d) {
                e();
            }
        }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                },
                            },
                            {
                                type: "ReturnStatement",
                                argument: null,
                            },
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "d",
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "e",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                alternate: null,
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var {a, b} = {a:1, b:2};\"", () => {
        expect(parseScript(`var {a, b} = {a:1, b:2};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value:  1,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value: 2,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`debugger;
if (a) debugger;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "DebuggerStatement",
                },
                {
                    type: "IfStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    consequent: {
                        type: "DebuggerStatement",
                    },
                    alternate: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`while (!((a && b) || (c + 0))) {
            d.e("f");
            var a;
            function b() {}
        }
        for (var c = 1, g; c && (g || c) && (!typeof c); ++c) {
            h();
            a();
            var i;
        }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "UnaryExpression",
                        operator: "!",
                        argument: {
                            type: "LogicalExpression",
                            operator: "||",
                            left: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                            right: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                right: {
                                    type: "Literal",
                                    value: 0,
                                },
                            },
                        },
                        prefix: true,
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: "f",
                                        },
                                    ],
                                },
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        ],
                    },
                },
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                init: {
                                    type: "Literal",
                                    value: 1,
                                },
                            },
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "g",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                    test: {
                        type: "LogicalExpression",
                        operator: "&&",
                        left: {
                            type: "LogicalExpression",
                            operator: "&&",
                            left: {
                                type: "Identifier",
                                name: "c",
                            },
                            right: {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "Identifier",
                                    name: "g",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "c",
                                },
                            },
                        },
                        right: {
                            type: "UnaryExpression",
                            operator: "!",
                            argument: {
                                type: "UnaryExpression",
                                operator: "typeof",
                                argument: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                prefix: true,
                            },
                            prefix: true,
                        },
                    },
                    update: {
                        type: "UpdateExpression",
                        operator: "++",
                        argument: {
                            type: "Identifier",
                            name: "c",
                        },
                        prefix: true,
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "h",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "i",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(;;);\"", () => {
        expect(parseScript(`for(;;);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: null,
                    test: null,
                    update: null,
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a(b, c) {
    // circular reference
    function d() {
        return e();
    }
    function e() {
        return d();
    }
    return b + c;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                        {
                            type: "Identifier",
                            name: "c",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "d",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "e",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "e",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ReturnStatement",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a(b, c) {
    var d = function() { return e() };
    var e = function() { return d() };
    return b + c;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                        {
                            type: "Identifier",
                            name: "c",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        init: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [],
                                            body: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ReturnStatement",
                                                        argument: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "e",
                                                            },
                                                            arguments: [],
                                                        },
                                                    },
                                                ],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        init: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [],
                                            body: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ReturnStatement",
                                                        argument: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "d",
                                                            },
                                                            arguments: [],
                                                        },
                                                    },
                                                ],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ *foo() { yield 3; } })\"", () => {
        expect(parseScript(`({ *foo() { yield 3; } })`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Identifier",
                            name: "foo",
                        },
                        computed: false,
                        value: {
                            type: "FunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "YieldExpression",
                                            argument: {
                                                type: "Literal",
                                                value: 3,
                                            },
                                            delegate: false,
                                        },
                                    },
                                ],
                            },
                            generator: true,
                            expression: false,
                            async: false,
                        },
                        kind: "init",
                        method: true,
                        shorthand: false,
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = {
    b: null,
    set c(d) {
    },
    get c() {
        return this.b;
    }
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value: "null",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [
                                                {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                            ],
                                            body: {
                                                type: "BlockStatement",
                                                body: [],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                        kind: "set",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "FunctionExpression",
                                            id: null,
                                            params: [],
                                            body: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ReturnStatement",
                                                        argument: {
                                                            type: "MemberExpression",
                                                            computed: false,
                                                            object: {
                                                                type: "ThisExpression",
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "b",
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                            generator: false,
                                            expression: false,
                                            async: false,
                                        },
                                        kind: "get",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    try {
        a();
    } catch(b) {
        var c = 1;
    }
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "TryStatement",
                                block: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                handler: {
                                    type: "CatchClause",
                                    param: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                        init: {
                                                            type: "Literal",
                                                            value: 1,
                                                        },
                                                    },
                                                ],
                                                kind: "var",
                                            },
                                        ],
                                    },
                                },
                                finalizer: null,
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    try {
        a();
    } catch(b) {
        var c = 1;
    }
    return c;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "TryStatement",
                                block: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                arguments: [],
                                            },
                                        },
                                    ],
                                },
                                handler: {
                                    type: "CatchClause",
                                    param: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "VariableDeclaration",
                                                declarations: [
                                                    {
                                                        type: "VariableDeclarator",
                                                        id: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                        init: {
                                                            type: "Literal",
                                                            value: 1,
                                                        },
                                                    },
                                                ],
                                                kind: "var",
                                            },
                                        ],
                                    },
                                },
                                finalizer: null,
                            },
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "Identifier",
                                    name: "c",
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = { if: 1 }\"", () => {
        expect(parseScript(`a = { if: 1 }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "if",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Literal",
                                        value: 1,
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(() => null)();\"", () => {
        expect(parseScript(`(() => null)();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "ArrowFunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "Literal",
                                value: "null",
                            },
                            generator: false,
                            expression: true,
                            async: false,
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a([b]) {
    c();
    var d;
    var b;  // Because anArg is already declared, this goes away!
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "b",
                                },
                            ],
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        init: null,
                                    },
                                ],
                                kind: "var",
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`function a() {
    // If foo is null or undefined, this should be an exception
    var {a,b} = c;
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "ObjectPattern",
                                            properties: [
                                                {
                                                    type: "Property",
                                                    key: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    computed: false,
                                                    value: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    kind: "init",
                                                    method: false,
                                                    shorthand: true,
                                                },
                                                {
                                                    type: "Property",
                                                    key: {
                                                        type: "Identifier",
                                                        name: "b",
                                                    },
                                                    computed: false,
                                                    value: {
                                                        type: "Identifier",
                                                        name: "b",
                                                    },
                                                    kind: "init",
                                                    method: false,
                                                    shorthand: true,
                                                },
                                            ],
                                        },
                                        init: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    },
                                ],
                                kind: "var",
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = typeof b.c != \"d\" \"", () => {
        expect(parseScript(`a = typeof b.c != "d" `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "BinaryExpression",
                            operator: "!=",
                            left: {
                                type: "UnaryExpression",
                                operator: "typeof",
                                argument: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                },
                                prefix: true,
                            },
                            right: {
                                type: "Literal",
                                value: "d",
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = \"b\" != typeof c.d \"", () => {
        expect(parseScript(`a = "b" != typeof c.d `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "BinaryExpression",
                            operator: "!=",
                            left: {
                                type: "Literal",
                                value: "b",
                            },
                            right: {
                                type: "UnaryExpression",
                                operator: "typeof",
                                argument: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                },
                                prefix: true,
                            },
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(var a = 1, b = 2;;);\"", () => {
        expect(parseScript(`for(var a = 1, b = 2;;);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: {
                                    type: "Literal",
                                    value: 1,
                                },
                            },
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                init: {
                                    type: "Literal",
                                    value: 2,
                                },
                            },
                        ],
                        kind: "var",
                    },
                    test: null,
                    update: null,
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = { get b () {} } \"", () => {
        expect(parseScript(`a = { get b () {} } `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "get",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = { set b (c) {} } \"", () => {
        expect(parseScript(`a = { set b (c) {} } `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "c",
                                            },
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "set",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = { set b (c) {} } \"", () => {
        expect(parseScript(`a = { set b (c) {} } `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "c",
                                            },
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "set",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a = b(100)) == a \"", () => {
        expect(parseScript(`(a = b('100')) == a `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "==",
                        left: {
                            type: "AssignmentExpression",
                            operator: "=",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "100",
                                    },
                                ],
                            },
                        },
                        right: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a = b(100)) <= a \"", () => {
        expect(parseScript(`(a = b('100')) <= a `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "BinaryExpression",
                        operator: "<=",
                        left: {
                            type: "AssignmentExpression",
                            operator: "=",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "100",
                                    },
                                ],
                            },
                        },
                        right: {
                            type: "Identifier",
                            name: "a",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = false; \"", () => {
        expect(parseScript(`a = false; `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Literal",
                            value: false,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a = b; \"", () => {
        expect(parseScript(`a = b; `)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "a",
                        },
                        right: {
                            type: "Identifier",
                            name: "b",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`while (a) {
    if (b) {
        switch (true) {
          case c():
            d();
        }
        continue;
    }
    e();
}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "SwitchStatement",
                                            discriminant: {
                                                type: "Literal",
                                                value: true,
                                            },
                                            cases: [
                                                {
                                                    type: "SwitchCase",
                                                    test: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "c",
                                                        },
                                                        arguments: [],
                                                    },
                                                    consequent: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "d",
                                                                },
                                                                arguments: [],
                                                            },
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                        {
                                            type: "ContinueStatement",
                                            label: null,
                                        },
                                    ],
                                },
                                alternate: null,
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = {};
a.b = 1;
a.c = 2;
d.e(a.b);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [],
                            },
                        },
                    ],
                    kind: "var",
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "Identifier",
                                name: "a",
                            },
                            property: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        right: {
                            type: "Literal",
                            value:  1,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "Identifier",
                                name: "a",
                            },
                            property: {
                                type: "Identifier",
                                name: "c",
                            },
                        },
                        right: {
                            type: "Literal",
                            value: 2,
                        },
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: false,
                            object: {
                                type: "Identifier",
                                name: "d",
                            },
                            property: {
                                type: "Identifier",
                                name: "e",
                            },
                        },
                        arguments: [
                            {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a = !a || !b || !c || !d || !e || !f;\"", () => {
        expect(parseScript(`var a = !a || !b || !c || !d || !e || !f;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "LogicalExpression",
                                operator: "||",
                                left: {
                                    type: "LogicalExpression",
                                    operator: "||",
                                    left: {
                                        type: "LogicalExpression",
                                        operator: "||",
                                        left: {
                                            type: "LogicalExpression",
                                            operator: "||",
                                            left: {
                                                type: "LogicalExpression",
                                                operator: "||",
                                                left: {
                                                    type: "UnaryExpression",
                                                    operator: "!",
                                                    argument: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    prefix: true,
                                                },
                                                right: {
                                                    type: "UnaryExpression",
                                                    operator: "!",
                                                    argument: {
                                                        type: "Identifier",
                                                        name: "b",
                                                    },
                                                    prefix: true,
                                                },
                                            },
                                            right: {
                                                type: "UnaryExpression",
                                                operator: "!",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                prefix: true,
                                            },
                                        },
                                        right: {
                                            type: "UnaryExpression",
                                            operator: "!",
                                            argument: {
                                                type: "Identifier",
                                                name: "d",
                                            },
                                            prefix: true,
                                        },
                                    },
                                    right: {
                                        type: "UnaryExpression",
                                        operator: "!",
                                        argument: {
                                            type: "Identifier",
                                            name: "e",
                                        },
                                        prefix: true,
                                    },
                                },
                                right: {
                                    type: "UnaryExpression",
                                    operator: "!",
                                    argument: {
                                        type: "Identifier",
                                        name: "f",
                                    },
                                    prefix: true,
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`var a = !b &&       // should not touch this one
    (!c || d) &&
    (!e || f) &&
    g();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "LogicalExpression",
                                    operator: "&&",
                                    left: {
                                        type: "LogicalExpression",
                                        operator: "&&",
                                        left: {
                                            type: "UnaryExpression",
                                            operator: "!",
                                            argument: {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                            prefix: true,
                                        },
                                        right: {
                                            type: "LogicalExpression",
                                            operator: "||",
                                            left: {
                                                type: "UnaryExpression",
                                                operator: "!",
                                                argument: {
                                                    type: "Identifier",
                                                    name: "c",
                                                },
                                                prefix: true,
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "d",
                                            },
                                        },
                                    },
                                    right: {
                                        type: "LogicalExpression",
                                        operator: "||",
                                        left: {
                                            type: "UnaryExpression",
                                            operator: "!",
                                            argument: {
                                                type: "Identifier",
                                                name: "e",
                                            },
                                            prefix: true,
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "f",
                                        },
                                    },
                                },
                                right: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "g",
                                    },
                                    arguments: [],
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(1, 2, a)();
(3, 4, b.a)();`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "SequenceExpression",
                            expressions: [
                                {
                                    type: "Literal",
                                    value: 1,
                                },
                                {
                                    type: "Literal",
                                    value: 2,
                                },
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                        arguments: [],
                    },
                },
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "SequenceExpression",
                            expressions: [
                                {
                                    type: "Literal",
                                    value: 3,
                                },
                                {
                                    type: "Literal",
                                    value: 4,
                                },
                                {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                },
                            ],
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a(....0)\"", () => {
        expect(parseScript(`a(....0)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Literal",
                                    value: 0,
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a(...b, ...c)\"", () => {
        expect(parseScript(`a(...b, ...c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "c",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a(.0)\"", () => {
        expect(parseScript(`a(.0)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: 0,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class extends a {})\"", () => {
        expect(parseScript(`(class extends a {})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "ClassBody",
                            body: [],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class a extends a {})\"", () => {
        expect(parseScript(`(class a extends a {})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        superClass: {
                            type: "Identifier",
                            name: "a",
                        },
                        body: {
                            type: "ClassBody",
                            body: [],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`(class {;;;
;a(){}b(){}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: null,
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "method",
                                    static: false,
                                },
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "method",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class {a(b) {use strict;}})\"", () => {
        expect(parseScript(`(class {a(b) {'use strict';}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: null,
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "b",
                                            },
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "Literal",
                                                        value: "use strict",
                                                    },
                                                },
                                            ],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "method",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class {a() {}})\"", () => {
        expect(parseScript(`(class {a() {}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: null,
                        body: {
                            type: "ClassBody",
                            body: [
                                {
                                    type: "MethodDefinition",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "method",
                                    static: false,
                                },
                            ],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(class extends (a,b) {})\"", () => {
        expect(parseScript(`(class extends (a,b) {})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ClassExpression",
                        id: null,
                        superClass: {
                            type: "SequenceExpression",
                            expressions: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                                {
                                    type: "Identifier",
                                    name: "b",
                                },
                            ],
                        },
                        body: {
                            type: "ClassBody",
                            body: [],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function a() { b; c() });\"", () => {
        expect(parseScript(`(function a() { b; c() });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        arguments: [],
                                    },
                                },
                            ],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function eval() { });\"", () => {
        expect(parseScript(`(function eval() { });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: {
                            type: "Identifier",
                            name: "eval",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function arguments() { });\"", () => {
        expect(parseScript(`(function arguments() { });`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: {
                            type: "Identifier",
                            name: "arguments",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function a(b, c) { })\"", () => {
        expect(parseScript(`(function a(b, c) { })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        params: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "Identifier",
                                name: "c",
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function(a = b){})\"", () => {
        expect(parseScript(`(function(a = b){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "AssignmentPattern",
                                left: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                right: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function(...a){})\"", () => {
        expect(parseScript(`(function(...a){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "RestElement",
                                argument: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function({a}){})\"", () => {
        expect(parseScript(`(function({a}){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function({a: b, a: c}){})\"", () => {
        expect(parseScript(`(function({a: b, a: c}){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function([a]){})\"", () => {
        expect(parseScript(`(function([a]){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function({a = 1}){})\"", () => {
        expect(parseScript(`(function({a = 1}){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "AssignmentPattern",
                                            left: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a: !function(){ a:; };\"", () => {
        expect(parseScript(`a: !function(){ a:; };`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "LabeledStatement",
                    label: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "ExpressionStatement",
                        expression: {
                            type: "UnaryExpression",
                            operator: "!",
                            argument: {
                                type: "FunctionExpression",
                                id: null,
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "LabeledStatement",
                                            label: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            body: {
                                                type: "EmptyStatement",
                                            },
                                        },
                                    ],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            prefix: true,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function([]){})\"", () => {
        expect(parseScript(`(function([]){})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "ArrayPattern",
                                elements: [],
                            },
                        ],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){ (function yield(){}); }\"", () => {
        expect(parseScript(`function* a(){ (function yield(){}); }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "FunctionExpression",
                                    id: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a)\"", () => {
        expect(parseScript(`(a)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"((a,a),(a,a))\"", () => {
        expect(parseScript(`((a,a),(a,a))`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "SequenceExpression",
                        expressions: [
                            {
                                type: "SequenceExpression",
                                expressions: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            {
                                type: "SequenceExpression",
                                expressions: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a;\"", () => {
        expect(parseScript(`a;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let()\"", () => {
        expect(parseScript(`let()`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "let",
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let.let\"", () => {
        expect(parseScript(`let.let`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "MemberExpression",
                        computed: false,
                        object: {
                            type: "Identifier",
                            name: "let",
                        },
                        property: {
                            type: "Identifier",
                            name: "let",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(let;;);\"", () => {
        expect(parseScript(`for(let;;);`)).to.eql({
            body: [
                {
                    body: {
                        type: "EmptyStatement",
                    },
                    init: {
                        name: "let",
                        type: "Identifier",
                    },
                    test: null,
                    type: "ForStatement",
                    update: null,
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"for(let();;);\"", () => {
        expect(parseScript(`for(let();;);`)).to.eql({
            body: [
                {
                    body: {
                        type: "EmptyStatement",
                    },
                    init: {
                        arguments: [],
                        callee: {
                            name: "let",
                            type: "Identifier",
                        },
                        type: "CallExpression",
                    },
                    test: null,
                    type: "ForStatement",
                    update: null,
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"æ—¥æœ¬èªž\"", () => {
        expect(parseScript(`æ—¥æœ¬èªž`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "æ—¥æœ¬èªž",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"â…£â…¡\"", () => {
        expect(parseScript(`â…£â…¡`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Identifier",
                        name: "â…£â…¡",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"null;\"", () => {
        expect(parseScript(`null;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: "null",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function() {\"use strict\";return 1;});\"", () => {
        expect(parseScript(`('\u{0000000000F8}')`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "Literal",
                        value: "Ã¸",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(b,c)\"", () => {
        expect(parseScript(`new a(b,c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                            {
                                type: "Identifier",
                                name: "c",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(b)\"", () => {
        expect(parseScript(`new a(b)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "b",
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(...b = c)\"", () => {
        expect(parseScript(`new a(...b = c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new a(...b, ...c)\"", () => {
        expect(parseScript(`new a(...b, ...c)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "b",
                                },
                            },
                            {
                                type: "SpreadElement",
                                argument: {
                                    type: "Identifier",
                                    name: "c",
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ get a(){ new.target } })\"", () => {
        expect(parseScript(`({ get a(){ new.target } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "MetaProperty",
                                                    meta: {
                                                        type: "Identifier",
                                                        name: "new",
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "target",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a() { new.\u0074arget; }\"", () => {
        expect(parseScript(`function a() { new.\u0074arget; }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "MetaProperty",
                                    meta: {
                                        type: "Identifier",
                                        name: "new",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "target",
                                    },
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ null: 1 })\"", () => {
        expect(parseScript(`({ null: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "null",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ get 10() {} })\"", () => {
        expect(parseScript(`({ get 10() {} })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Literal",
                                    value: 10,
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "get",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set a(b) { b } })\"", () => {
        expect(parseScript(`({ set a(b) { b } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set true(a) { a } })\"", () => {
        expect(parseScript(`({ set true(a) { a } })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "true",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "set",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ __proto__: 1 })\"", () => {
        expect(parseScript(`({ __proto__: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "__proto__",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({ set: 1 })\"", () => {
        expect(parseScript(`({ set: 1 })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "set",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a, a: 1, c})\"", () => {
        expect(parseScript(`({a, a: 1, c})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a, b})\"", () => {
        expect(parseScript(`({a, b})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                kind: "init",
                                method: false,
                                shorthand: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a(){}})\"", () => {
        expect(parseScript(`({a(){}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a(b,c){}})\"", () => {
        expect(parseScript(`({a(b,c){}})`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "init",
                                method: true,
                                shorthand: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (a in let) {}\"", () => {
        expect(parseScript(`for (a in let) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "let",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for (let a = let;;) {}\"", () => {
        expect(parseScript(`for (let a = let;;) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: {
                                    type: "Identifier",
                                    name: "let",
                                },
                            },
                        ],
                        kind: "let",
                    },
                    test: null,
                    update: null,
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a = {a:1, b:2, c:3}\"", () => {
        expect(parseScript(`var a = {a:1, b:2, c:3}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "ObjectExpression",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value: 2,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Literal",
                                            value: 3,
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(o.foo in a) { alert(o.foo) }\"", () => {
        expect(parseScript(`for(o.foo in a) { alert(o.foo) }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "MemberExpression",
                        computed: false,
                        object: {
                            type: "Identifier",
                            name: "o",
                        },
                        property: {
                            type: "Identifier",
                            name: "foo",
                        },
                    },
                    right: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "alert",
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: false,
                                            object: {
                                                type: "Identifier",
                                                name: "o",
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "foo",
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"let {a, b}\"", () => {
        expect(parseScript(`let {a, b}`)).to.eql({
            body: [
                {
                    declarations: [
                        {
                            id: {
                                properties: [
                                    {
                                        computed: false,
                                        key: {
                                            name: "a",
                                            type: "Identifier",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                        type: "Property",
                                        value: {
                                            name: "a",
                                            type: "Identifier",
                                        },
                                    },
                                    {
                                        computed: false,
                                        key: {
                                            name: "b",
                                            type: "Identifier",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                        type: "Property",
                                        value: {
                                            name: "b",
                                            type: "Identifier",
                                        },
                                    },
                                ],
                                type: "ObjectPattern",
                            },
                            init: null,
                            type: "VariableDeclarator",
                        },
                    ],
                    kind: "let",
                    type: "VariableDeclaration",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"for (obj.prop in { bar: 1, baz: 2 }) {}\"", () => {
        expect(parseScript(`for (obj.prop in { bar: 1, baz: 2 }) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "MemberExpression",
                        computed: false,
                        object: {
                            type: "Identifier",
                            name: "obj",
                        },
                        property: {
                            type: "Identifier",
                            name: "prop",
                        },
                    },
                    right: {
                        type: "ObjectExpression",
                        properties: [
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "bar",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 1,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                            {
                                type: "Property",
                                key: {
                                    type: "Identifier",
                                    name: "baz",
                                },
                                computed: false,
                                value: {
                                    type: "Literal",
                                    value: 2,
                                },
                                kind: "init",
                                method: false,
                                shorthand: false,
                            },
                        ],
                    },
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a() {} function a() {}\"", () => {
        expect(parseScript(`function a() {} function a() {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a() { function a() {} function a() {} }\"", () => {
        expect(parseScript(`function a() { function a() {} function a() {} }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"a: function a(){}\"", () => {
        expect(parseScript(`a: function a(){}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "LabeledStatement",
                    label: {
                        type: "Identifier",
                        name: "a",
                    },
                    body: {
                        type: "FunctionDeclaration",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                        generator: false,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){yield a}\"", () => {
        expect(parseScript(`function* a(){yield a}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function a() { function* a() {} function a() {} }\"", () => {
        expect(parseScript(`function a() { function* a() {} function a() {} }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: true,
                                expression: false,
                                async: false,
                            },
                            {
                                type: "FunctionDeclaration",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                params: [],
                                body: {
                                    type: "BlockStatement",
                                    body: [],
                                },
                                generator: false,
                                expression: false,
                                async: false,
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"while(true) var a\"", () => {
        expect(parseScript(`while(true) var a`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "WhileStatement",
                    test: {
                        type: "Literal",
                        value: true,
                    },
                    body: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: null,
                            },
                        ],
                        kind: "var",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a] = 1\"", () => {
        expect(parseScript(`[a] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a,] = 1\"", () => {
        expect(parseScript(`[a,] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value:  1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[[a]] = 1\"", () => {
        expect(parseScript(`[[a]] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "ArrayPattern",
                                    elements: [
                                        {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    ],
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[...[a]] = 1\"", () => {
        expect(parseScript(`[...[a]] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "ArrayPattern",
                                        elements: [
                                            {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a, ...{0: b}] = 1\"", () => {
        expect(parseScript(`[a, ...{0: b}] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "ObjectPattern",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Literal",
                                                    value: 0,
                                                },
                                                computed: false,
                                                value: {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: false,
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a, a] = 1\"", () => {
        expect(parseScript(`[a, a] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a.b=b] = c\"", () => {
        expect(parseScript(`[a.b=b] = c`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "AssignmentPattern",
                                    left: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                },
                            ],
                        },
                        right: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[a[b]=b] = c\"", () => {
        expect(parseScript(`[a[b]=b] = c`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "AssignmentPattern",
                                    left: {
                                        type: "MemberExpression",
                                        computed: true,
                                        object: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                },
                            ],
                        },
                        right: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[...[...a[b]]] = c\"", () => {
        expect(parseScript(`[...[...a[b]]] = c`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "ArrayPattern",
                                        elements: [
                                            {
                                                type: "RestElement",
                                                argument: {
                                                    type: "MemberExpression",
                                                    computed: true,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "b",
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                        right: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[] = 1\"", () => {
        expect(parseScript(`[] = 1`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"[{a=1},{a=2}] = 3\"", () => {
        expect(parseScript(`[{a=1},{a=2}] = 3`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "ObjectPattern",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            computed: false,
                                            value: {
                                                type: "AssignmentPattern",
                                                left: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                right: {
                                                    type: "Literal",
                                                    value: 1,
                                                },
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: true,
                                        },
                                    ],
                                },
                                {
                                    type: "ObjectPattern",
                                    properties: [
                                        {
                                            type: "Property",
                                            key: {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            computed: false,
                                            value: {
                                                type: "AssignmentPattern",
                                                left: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                right: {
                                                    type: "Literal",
                                                    value: 2,
                                                },
                                            },
                                            kind: "init",
                                            method: false,
                                            shorthand: true,
                                        },
                                    ],
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 3,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a} = 1)\"", () => {
        expect(parseScript(`({a} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a,} = 1)\"", () => {
        expect(parseScript(`({a,} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a,b} = 1)\"", () => {
        expect(parseScript(`({a,b} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a,b,} = 1)\"", () => {
        expect(parseScript(`({a,b,} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({[a]: a} = 1)\"", () => {
        expect(parseScript(`({[a]: a} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: true,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({var: a} = 1)\"", () => {
        expect(parseScript(`({var: a} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "var",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({\"a\": b} = 1)\"", () => {
        expect(parseScript(`({"a": b} = 1)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Literal",
                                        value: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a: b = 1} = 2)\"", () => {
        expect(parseScript(`({a: b = 1} = 2)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 2,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a: b = c = 1} = 2)\"", () => {
        expect(parseScript(`({a: b = c = 1} = 2)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        right: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "Identifier",
                                                name: "c",
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                            },
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 2,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a: [b] = 1} = 2)\"", () => {
        expect(parseScript(`({a: [b] = 1} = 2)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "ArrayPattern",
                                            elements: [
                                                {
                                                    type: "Identifier",
                                                    name: "b",
                                                },
                                            ],
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 2,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a:let} = 1);\"", () => {
        expect(parseScript(`({a:let} = 1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "let",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a:yield} = 1);\"", () => {
        expect(parseScript(`({a:yield} = 1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: false,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(function*() { [...{ a = yield }] = 1; })\"", () => {
        expect(parseScript(`(function*() { [...{ a = yield }] = 1; })`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "FunctionExpression",
                        id: null,
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "AssignmentExpression",
                                        operator: "=",
                                        left: {
                                            type: "ArrayPattern",
                                            elements: [
                                                {
                                                    type: "RestElement",
                                                    argument: {
                                                        type: "ObjectPattern",
                                                        properties: [
                                                            {
                                                                type: "Property",
                                                                key: {
                                                                    type: "Identifier",
                                                                    name: "a",
                                                                },
                                                                computed: false,
                                                                value: {
                                                                    type: "AssignmentPattern",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                    right: {
                                                                        type: "YieldExpression",
                                                                        argument: null,
                                                                        delegate: false,
                                                                    },
                                                                },
                                                                kind: "init",
                                                                method: false,
                                                                shorthand: true,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                        },
                                    },
                                },
                            ],
                        },
                        generator: true,
                        expression: false,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a, [a] = 1;\"", () => {
        expect(parseScript(`var a, [a] = 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [a, ...a] = 1;\"", () => {
        expect(parseScript(`var [a, ...a] = 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    {
                                        type: "RestElement",
                                        argument: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try {} catch ([a]) {}\"", () => {
        expect(parseScript(`try {} catch ([a]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                            ],
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"try {} catch ([a, ...b]) {}\"", () => {
        expect(parseScript(`try {} catch ([a, ...b]) {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "TryStatement",
                    block: {
                        type: "BlockStatement",
                        body: [],
                    },
                    handler: {
                        type: "CatchClause",
                        param: {
                            type: "ArrayPattern",
                            elements: [
                                {
                                    type: "Identifier",
                                    name: "a",
                                },
                                {
                                    type: "RestElement",
                                    argument: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                },
                            ],
                        },
                        body: {
                            type: "BlockStatement",
                            body: [],
                        },
                    },
                    finalizer: null,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(let in 1);\"", () => {
        expect(parseScript(`for(let in 1);`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForInStatement",
                    left: {
                        type: "Identifier",
                        name: "let",
                    },
                    right: {
                        type: "Literal",
                        value: 1,
                    },
                    body: {
                        type: "EmptyStatement",
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var {a} = 1;\"", () => {
        expect(parseScript(`var {a} = 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        computed: false,
                                        value: {
                                            type: "Identifier",
                                            name: "a",
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: true,
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [{a = 1}] = 2;\"", () => {
        expect(parseScript(`var [{a = 1}] = 2;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "ObjectPattern",
                                        properties: [
                                            {
                                                type: "Property",
                                                key: {
                                                    type: "Identifier",
                                                    name: "a",
                                                },
                                                computed: false,
                                                value: {
                                                    type: "AssignmentPattern",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        value: 1,
                                                    },
                                                },
                                                kind: "init",
                                                method: false,
                                                shorthand: true,
                                            },
                                        ],
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 2,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a, {b: {c: a}} = 1;\"", () => {
        expect(parseScript(`var a, {b: {c: a}} = 1;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ObjectPattern",
                                properties: [
                                    {
                                        type: "Property",
                                        key: {
                                            type: "Identifier",
                                            name: "b",
                                        },
                                        computed: false,
                                        value: {
                                            type: "ObjectPattern",
                                            properties: [
                                                {
                                                    type: "Property",
                                                    key: {
                                                        type: "Identifier",
                                                        name: "c",
                                                    },
                                                    computed: false,
                                                    value: {
                                                        type: "Identifier",
                                                        name: "a",
                                                    },
                                                    kind: "init",
                                                    method: false,
                                                    shorthand: false,
                                                },
                                            ],
                                        },
                                        kind: "init",
                                        method: false,
                                        shorthand: false,
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 1,
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {;b(){};c(){};}\"", () => {
        expect(parseScript(`class a {;b(){};c(){};}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a {static [b](){};}\"", () => {
        expect(parseScript(`class a {static [b](){};}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: null,
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                computed: true,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var a = class b extends 1{}\"", () => {
        expect(parseScript(`var a = class b extends 1{}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: {
                                type: "ClassExpression",
                                id: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                superClass: {
                                    type: "Literal",
                                    value: 1,
                                },
                                body: {
                                    type: "ClassBody",
                                    body: [],
                                },
                            },
                        },
                    ],
                    kind: "var",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(...a) => 0\"", () => {
        expect(parseScript(`(...a) => 0`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "RestElement",
                                argument: {
                                    type: "Identifier",
                                    name: "a",
                                },
                            },
                        ],
                        body: {
                            type: "Literal",
                            value: 0,
                        },
                        generator: false,
                        expression: true,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(...[]) => 0\"", () => {
        expect(parseScript(`(...[]) => 0`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "RestElement",
                                argument: {
                                    type: "ArrayPattern",
                                    elements: [],
                                },
                            },
                        ],
                        body: {
                            type: "Literal",
                            value: 0,
                        },
                        generator: false,
                        expression: true,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"(a, ...[]) => 0\"", () => {
        expect(parseScript(`(a, ...[]) => 0`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "ArrowFunctionExpression",
                        id: null,
                        params: [
                            {
                                type: "Identifier",
                                name: "a",
                            },
                            {
                                type: "RestElement",
                                argument: {
                                    type: "ArrayPattern",
                                    elements: [],
                                },
                            },
                        ],
                        body: {
                            type: "Literal",
                            value: 0,
                        },
                        generator: false,
                        expression: true,
                        async: false,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"x **= 0\"", () => {
        expect(parseScript(`x **= 0`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "**=",
                        left: {
                            type: "Identifier",
                            name: "x",
                        },
                        right: {
                            type: "Literal",
                            value: 0,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"new(a in b)\"", () => {
        expect(parseScript(`new(a in b)`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "NewExpression",
                        callee: {
                            type: "BinaryExpression",
                            operator: "in",
                            left: {
                                type: "Identifier",
                                name: "a",
                            },
                            right: {
                                type: "Identifier",
                                name: "b",
                            },
                        },
                        arguments: [],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){(class extends (yield) {});}\"", () => {
        expect(parseScript(`function* a(){(class extends (yield) {});}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "ClassExpression",
                                    id: null,
                                    superClass: {
                                        type: "YieldExpression",
                                        argument: null,
                                        delegate: false,
                                    },
                                    body: {
                                        type: "ClassBody",
                                        body: [],
                                    },
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function* a(){(class {[yield](){}})};\"", () => {
        expect(parseScript(`function* a(){(class {[yield](){}})};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "ClassExpression",
                                    id: null,
                                    superClass: null,
                                    body: {
                                        type: "ClassBody",
                                        body: [
                                            {
                                                type: "MethodDefinition",
                                                key: {
                                                    type: "YieldExpression",
                                                    argument: null,
                                                    delegate: false,
                                                },
                                                computed: true,
                                                value: {
                                                    type: "FunctionExpression",
                                                    id: null,
                                                    params: [],
                                                    body: {
                                                        type: "BlockStatement",
                                                        body: [],
                                                    },
                                                    generator: false,
                                                    expression: false,
                                                    async: false,
                                                },
                                                kind: "method",
                                                static: false,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
                {
                    type: "EmptyStatement",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield typeof 0}\"", () => {
        expect(parseScript(`function *a(){yield typeof 0}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "UnaryExpression",
                                        operator: "typeof",
                                        argument: {
                                            type: "Literal",
                                            value: 0,
                                        },
                                        prefix: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"function *a(){yield void 0}\"", () => {
        expect(parseScript(`function *a(){yield void 0}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "YieldExpression",
                                    argument: {
                                        type: "UnaryExpression",
                                        operator: "void",
                                        argument: {
                                            type: "Literal",
                                            value: 0,
                                        },
                                        prefix: true,
                                    },
                                    delegate: false,
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({a}) = 0;\"", () => {
        expect(parseScript(`({a}) = 0;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "Literal",
                            value: 0,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"({Object = 0, String = 0}) = {};\"", () => {
        expect(parseScript(`({Object = 0, String = 0}) = {};`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "Object",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "Object",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 0,
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "String",
                                    },
                                    computed: false,
                                    value: {
                                        type: "AssignmentPattern",
                                        left: {
                                            type: "Identifier",
                                            name: "String",
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 0,
                                        },
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"{a:(b = 0)} = 1)\"", () => {
        expect(parseScript(`{a:(b = 0)} = 1)`)).to.eql({
            body: [
                {
                    body: [
                        {
                            body: {
                                expression: {
                                    left: {
                                        name: "b",
                                        type: "Identifier",
                                    },
                                    operator: "=",
                                    right: {
                                        type: "Literal",
                                        value: 0,
                                    },
                                    type: "AssignmentExpression",
                                },
                                type: "ExpressionStatement",
                            },
                            label: {
                                name: "a",
                                type: "Identifier",
                            },
                            type: "LabeledStatement",
                        },
                    ],
                    type: "BlockStatement",
                },
                {
                    expression: {
                        name: 0,
                        type: "Identifier",
                    },
                    type: "ExpressionStatement",
                },
                {
                    expression: {
                        type: "Literal",
                        value: 1,
                    },
                    type: "ExpressionStatement",
                },
                {
                    expression: {
                        name: 1,
                        type: "Identifier",
                    },
                    type: "ExpressionStatement",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"({x, y}) = {}\"", () => {
        expect(parseScript(`({x, y}) = {}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "ObjectPattern",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "x",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "x",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "y",
                                    },
                                    computed: false,
                                    value: {
                                        type: "Identifier",
                                        name: "y",
                                    },
                                    kind: "init",
                                    method: false,
                                    shorthand: true,
                                },
                            ],
                        },
                        right: {
                            type: "ObjectExpression",
                            properties: [],
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"var [(a)] = 0\"", () => {
        expect(parseScript(`var [(a)] = 0`)).to.eql({
            body: [
                {
                    declarations: [
                        {
                            id: {
                                elements: [
                                    null,
                                    {
                                        name: "a",
                                        type: "Identifier",
                                    },
                                    null,
                                ],
                                type: "ArrayPattern",
                            },
                            init: {
                                type: "Literal",
                                value: 0,
                            },
                            type: "VariableDeclarator",
                        },
                    ],
                    kind: "var",
                    type: "VariableDeclaration",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"!{ a() { !function* (a = super.b()){} } };\"", () => {
        expect(parseScript(`!{ a() { !function* (a = super.b()){} } };`)).to.eql({
            /* tslint:disable max-line-length */
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "UnaryExpression",
                        operator: "!",
                        argument: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "UnaryExpression",
                                                        operator: "!",
                                                        argument: {
                                                            type: "FunctionExpression",
                                                            id: null,
                                                            params: [
                                                                {
                                                                    type: "AssignmentPattern",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "a",
                                                                    },
                                                                    right: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: false,
                                                                            object: {
                                                                                type: "Super",
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "b",
                                                                            },
                                                                        },
                                                                        arguments: [],
                                                                    },
                                                                },
                                                            ],
                                                            body: {
                                                                type: "BlockStatement",
                                                                body: [],
                                                            },
                                                            generator: true,
                                                            expression: false,
                                                            async: false,
                                                        },
                                                        prefix: true,
                                                    },
                                                },
                                            ],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "init",
                                    method: true,
                                    shorthand: false,
                                },
                            ],
                        },
                        prefix: true,
                    },
                },
            ],
            sourceType: "script",
            /* tslint:enable max-line-length */
        });
    });

    it("should parse \"function* a(b){ super.c }\"", () => {
        expect(parseScript(`function* a(b){ super.c }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "FunctionDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    params: [
                        {
                            type: "Identifier",
                            name: "b",
                        },
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "MemberExpression",
                                    computed: false,
                                    object: {
                                        type: "Super",
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "c",
                                    },
                                },
                            },
                        ],
                    },
                    generator: true,
                    expression: false,
                    async: false,
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { c() { function* d(){ super.e(); } } }\"", () => {
        expect(parseScript(`class a extends b { c() { function* d(){ super.e(); } } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "FunctionDeclaration",
                                                id: {
                                                    type: "Identifier",
                                                    name: "d",
                                                },
                                                params: [],
                                                body: {
                                                    type: "BlockStatement",
                                                    body: [
                                                        {
                                                            type: "ExpressionStatement",
                                                            expression: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: false,
                                                                    object: {
                                                                        type: "Super",
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "e",
                                                                    },
                                                                },
                                                                arguments: [],
                                                            },
                                                        },
                                                    ],
                                                },
                                                generator: true,
                                                expression: false,
                                                async: false,
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"class a extends b { static c() { super(); } }\"", () => {
        expect(parseScript(`class a extends b { static c() { super(); } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Super",
                                                    },
                                                    arguments: [],
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "method",
                                static: true,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });

    /* tslint:disable max-line-length */
    it("should parse \"class a extends b { constructor() { !{*constructor() { super(); }}; } }\"", () => {
        expect(parseScript(`class a extends b { constructor() { !{*constructor() { super(); }}; } }`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ClassDeclaration",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    superClass: {
                        type: "Identifier",
                        name: "b",
                    },
                    body: {
                        type: "ClassBody",
                        body: [
                            {
                                type: "MethodDefinition",
                                key: {
                                    type: "Identifier",
                                    name: "constructor",
                                },
                                computed: false,
                                value: {
                                    type: "FunctionExpression",
                                    id: null,
                                    params: [],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "UnaryExpression",
                                                    operator: "!",
                                                    argument: {
                                                        type: "ObjectExpression",
                                                        properties: [
                                                            {
                                                                type: "Property",
                                                                key: {
                                                                    type: "Identifier",
                                                                    name: "constructor",
                                                                },
                                                                computed: false,
                                                                value: {
                                                                    type: "FunctionExpression",
                                                                    id: null,
                                                                    params: [],
                                                                    body: {
                                                                        type: "BlockStatement",
                                                                        body: [
                                                                            {
                                                                                type: "ExpressionStatement",
                                                                                expression: {
                                                                                    type: "CallExpression",
                                                                                    callee: {
                                                                                        type: "Super",
                                                                                    },
                                                                                    arguments: [],
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    generator: true,
                                                                    expression: false,
                                                                    async: false,
                                                                },
                                                                kind: "init",
                                                                method: true,
                                                                shorthand: false,
                                                            },
                                                        ],
                                                    },
                                                    prefix: true,
                                                },
                                            },
                                        ],
                                    },
                                    generator: false,
                                    expression: false,
                                    async: false,
                                },
                                kind: "constructor",
                                static: false,
                            },
                        ],
                    },
                },
            ],
            sourceType: "script",
        });
    });
    /* tslint:enable max-line-length */

    it("should parse \"class A { *f(eval){} }\"", () => {
        expect(parseScript(`class A { *f(eval){} }`)).to.eql({
            body: [
                {
                    body: {
                        body: [
                            {
                                computed: false,
                                key: {
                                    name: "f",
                                    type: "Identifier",
                                },
                                kind: "method",
                                static: false,
                                type: "MethodDefinition",
                                value: {
                                    async: false,
                                    body: {
                                        body: [],
                                        type: "BlockStatement",
                                    },
                                    expression: false,
                                    generator: true,
                                    id: null,
                                    params: [
                                        {
                                            name: "eval",
                                            type: "Identifier",
                                        },
                                    ],
                                    type: "FunctionExpression",
                                },
                            },
                        ],
                        type: "ClassBody",
                    },
                    id: {
                        name: "A",
                        type: "Identifier",
                    },
                    superClass: null,
                    type: "ClassDeclaration",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"use strict; [eval] = 0\"", () => {
        expect(parseScript(`'use strict'; [eval] = 0`)).to.eql(
            {
                body: [
                    {
                        expression: {
                            type: "Literal",
                            value: "use strict",
                        },
                        type: "ExpressionStatement",
                    },
                    {
                        expression: {
                            left: {
                                elements: [
                                    {
                                        name: "eval",
                                        type: "Identifier",
                                    },
                                ],
                                type: "ArrayPattern",
                            },
                            operator: "=",
                            right: {
                                type: "Literal",
                                value: 0,
                            },
                            type: "AssignmentExpression",
                        },
                        type: "ExpressionStatement",
                    },
                ],
                sourceType: "script",
                type: "Program",
            });
    });

    it("should parse \"!{ f(a, a){} };\"", () => {
        expect(parseScript(`!{ f(a, a){} };`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ExpressionStatement",
                    expression: {
                        type: "UnaryExpression",
                        operator: "!",
                        argument: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "f",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                            {
                                                type: "Identifier",
                                                name: "a",
                                            },
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: false,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "init",
                                    method: true,
                                    shorthand: false,
                                },
                            ],
                        },
                        prefix: true,
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(const a = 0;;) label: function f(){}\"", () => {
        expect(parseScript(`for(const a = 0;;) label: function f(){}`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "ForStatement",
                    init: {
                        type: "VariableDeclaration",
                        declarations: [
                            {
                                type: "VariableDeclarator",
                                id: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                init: {
                                    type: "Literal",
                                    value: 0,
                                },
                            },
                        ],
                        kind: "const",
                    },
                    test: null,
                    update: null,
                    body: {
                        type: "LabeledStatement",
                        label: {
                            type: "Identifier",
                            name: "label",
                        },
                        body: {
                            type: "FunctionDeclaration",
                            id: {
                                type: "Identifier",
                                name: "f",
                            },
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            generator: false,
                            expression: false,
                            async: false,
                        },
                    },
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"for(let let in 0);\"", () => {
        expect(parseScript(`for(let let in 0);`)).to.eql({
            body: [
                {
                    body: {
                        type: "EmptyStatement",
                    },
                    left: {
                        declarations: [
                            {
                                id: {
                                    name: "let",
                                    type: "Identifier",
                                },
                                init: null,
                                type: "VariableDeclarator",
                            },
                        ],
                        kind: "let",
                        type: "VariableDeclaration",
                    },
                    right: {
                        type: "Literal",
                        value: 0,
                    },
                    type: "ForInStatement",
                },
            ],
            sourceType: "script",
            type: "Program",
        });
    });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseScript(`let a, [a] = 0;`)).to.eql({
            type: "Program",
            body: [
                {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "a",
                            },
                            init: null,
                        },
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "ArrayPattern",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                ],
                            },
                            init: {
                                type: "Literal",
                                value: 0,
                            },
                        },
                    ],
                    kind: "let",
                },
            ],
            sourceType: "script",
        });
    });

    it("should parse \"export const a = 1;\"", () => {
        expect(parseModule(`export const a = 1;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        init: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                ],
                kind: "const",
            },
            specifiers: [],
            source: null,
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export default { a: 1 };\"", () => {
        expect(parseModule(`export default { a: 1 };`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportDefaultDeclaration",
            declaration: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Identifier",
                            name: "a",
                        },
                        computed: false,
                        value: {
                            type: "Literal",
                            value: 1,
                        },
                        kind: "init",
                        method: false,
                        shorthand: false,
                    },
                ],
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export {a as default} from \"foo\";\"", () => {
        expect(parseModule(`export {a as default} from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: null,
            specifiers: [
                {
                    type: "ExportSpecifier",
                    exported: {
                        type: "Identifier",
                        name: "default",
                    },
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export {a} from \"foo\";\"", () => {
        expect(parseModule(`export {a} from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: null,
            specifiers: [
                {
                    type: "ExportSpecifier",
                    exported: {
                        type: "Identifier",
                        name: "a",
                    },
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export function a () {} false\"", () => {
        expect(parseModule(`export function a () {} false`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "FunctionDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                params: [],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                async: false,
                generator: false,
                expression: false,
            },
            specifiers: [],
            source: null,
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: false,
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export let a = 1;\"", () => {
        expect(parseModule(`export let a = 1;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        init: {
                            type: "Literal",
                            value: 1,
                        },
                    },
                ],
                kind: "let",
            },
            specifiers: [],
            source: null,
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export var a = function () {};\"", () => {
        expect(parseModule(`export var a = function () {};`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "a",
                        },
                        init: {
                            type: "FunctionExpression",
                            id: null,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [],
                            },
                            async: false,
                            generator: false,
                            expression: false,
                        },
                    },
                ],
                kind: "var",
            },
            specifiers: [],
            source: null,
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"\"use strict\";\"", () => {
        expect(parseModule(`"use strict";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: "use strict",
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseModule(`export {}
;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: null,
            specifiers: [],
            source: null,
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseModule(`export {} from "a"
;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: null,
            specifiers: [],
            source: {
                type: "Literal",
                value: "a",
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"let a, [a] = 0;\"", () => {
        expect(parseModule(`export function a(){}
;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "FunctionDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                params: [],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                 async: false,
                generator: false,
                expression: false,
            },
            specifiers: [],
            source: null,
        },
        {
            type: "EmptyStatement",
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"export function a(){};1\"", () => {
        expect(parseModule(`export function a(){};1`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "FunctionDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                params: [],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                async: false,
                generator: false,
                expression: false,
            },
            specifiers: [],
            source: null,
        },
        {
            type: "EmptyStatement",
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: 1,
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse export class a{};1", () => {
        expect(parseModule(`export class a{};1`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportNamedDeclaration",
            declaration: {
                type: "ClassDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                superClass: null,
                body: {
                    type: "ClassBody",
                    body: [],
                },
            },
            specifiers: [],
            source: null,
        },
        {
            type: "EmptyStatement",
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "Literal",
                value: 1,
            },
        },
    ],
    sourceType: "module",
});
     });

    it("should parse \"import a, {b} from \"foo\";\"", () => {
        expect(parseModule(`import a, {b} from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ImportDeclaration",
            specifiers: [
                {
                    type: "ImportDefaultSpecifier",
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                },
                {
                    type: "ImportSpecifier",
                    local: {
                        type: "Identifier",
                        name: "b",
                    },
                    imported: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
   });

    it("should parse \"import a, * as b from \"foo\";\"", () => {
        expect(parseModule(`import a, * as b from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ImportDeclaration",
            specifiers: [
                {
                    type: "ImportDefaultSpecifier",
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                },
                {
                    type: "ImportNamespaceSpecifier",
                    local: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
   });

    it("should parse \"import {default as a} from \"foo\";\"", () => {
        expect(parseModule(`import {default as a} from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ImportDeclaration",
            specifiers: [
                {
                    type: "ImportSpecifier",
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                    imported: {
                        type: "Identifier",
                        name: "default",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
   });

    it("should parse \"import {a, b} from \"foo\";\"", () => {
        expect(parseModule(`import {a, b} from "foo";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ImportDeclaration",
            specifiers: [
                {
                    type: "ImportSpecifier",
                    local: {
                        type: "Identifier",
                        name: "a",
                    },
                    imported: {
                        type: "Identifier",
                        name: "a",
                    },
                },
                {
                    type: "ImportSpecifier",
                    local: {
                        type: "Identifier",
                        name: "b",
                    },
                    imported: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            ],
            source: {
                type: "Literal",
                value: "foo",
            },
        },
    ],
    sourceType: "module",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`a();
b();
c();`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "b",
                },
                arguments: [],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "c",
                },
                arguments: [],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`d: {
    if (a) b("c");
    else break d;
    e.f("g");
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "LabeledStatement",
            label: {
                type: "Identifier",
                name: "d",
            },
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "a",
                        },
                        consequent: {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "c",
                                    },
                                ],
                            },
                        },
                        alternate: {
                            type: "BreakStatement",
                            label: {
                                type: "Identifier",
                                name: "d",
                            },
                        },
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "e",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "f",
                                },
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "g",
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`if ((function(){ return true })()) {
    a(true);
} else {
    b(false);
}
(function(){
    c.d("e");
})();`)).to.eql({
    type: "Program",
    body: [
        {
            type: "IfStatement",
            test: {
                type: "CallExpression",
                callee: {
                    type: "FunctionExpression",
                    id: null,
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "Literal",
                                    value: true,
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
                arguments: [],
            },
            consequent: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "a",
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: true,
                                },
                            ],
                        },
                    },
                ],
            },
            alternate: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: false,
                                },
                            ],
                        },
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "FunctionExpression",
                    id: null,
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: false,
                                        object: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "d",
                                        },
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: "e",
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                    generator: false,
                    expression: false,
                    async: false,
                },
                arguments: [],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`new a(1);
new a(2)(3);
new a(4)(5)(6);
new new a(7);
new new a(8)(9);
new (new a(10))(11);
(new new a(12))(13);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "NewExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 1,
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "NewExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 2,
                        },
                    ],
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 3,
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "CallExpression",
                    callee: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: 4,
                            },
                        ],
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 5,
                        },
                    ],
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 6,
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "NewExpression",
                callee: {
                    type: "NewExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 7,
                        },
                    ],
                },
                arguments: [],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "NewExpression",
                callee: {
                    type: "NewExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 8,
                        },
                    ],
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 9,
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "NewExpression",
                callee: {
                    type: "NewExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 10,
                        },
                    ],
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 11,
                    },
                ],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "NewExpression",
                    callee: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "a",
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: 12,
                            },
                        ],
                    },
                    arguments: [],
                },
                arguments: [
                    {
                        type: "Literal",
                        value: 13,
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse \"a[\"b\"] = \"c\";\"", () => {
        expect(parseScript(`a["b"] = "c";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "b",
                    },
                },
                right: {
                    type: "Literal",
                    value: "c",
                },
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`a["b"] = "c";
a["if"] = "if";
a["*"] = "d";
a["\u0EB3"] = "e";
a[""] = "f";
a["1_1"] = "b";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "b",
                    },
                },
                right: {
                    type: "Literal",
                    value: "c",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "if",
                    },
                },
                right: {
                    type: "Literal",
                    value: "if",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "*",
                    },
                },
                right: {
                    type: "Literal",
                    value: "d",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "àº³",
                    },
                },
                right: {
                    type: "Literal",
                    value: "e",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "",
                    },
                },
                right: {
                    type: "Literal",
                    value: "f",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "1_1",
                    },
                },
                right: {
                    type: "Literal",
                    value: "b",
                },
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`a = "b".c;
a = ("b" + "d")["e" + "f"];
a = g.c;
a = ("b" + g).c;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "MemberExpression",
                    computed: false,
                    object: {
                        type: "Literal",
                        value: "b",
                    },
                    property: {
                        type: "Identifier",
                        name: "c",
                    },
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "Literal",
                            value: "b",
                        },
                        right: {
                            type: "Literal",
                            value: "d",
                        },
                    },
                    property: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "Literal",
                            value: "e",
                        },
                        right: {
                            type: "Literal",
                            value: "f",
                        },
                    },
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "MemberExpression",
                    computed: false,
                    object: {
                        type: "Identifier",
                        name: "g",
                    },
                    property: {
                        type: "Identifier",
                        name: "c",
                    },
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "a",
                },
                right: {
                    type: "MemberExpression",
                    computed: false,
                    object: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "Literal",
                            value: "b",
                        },
                        right: {
                            type: "Identifier",
                            name: "g",
                        },
                    },
                    property: {
                        type: "Identifier",
                        name: "c",
                    },
                },
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export class a{};1", () => {
        expect(parseScript(`function a() {
}
function b() {
    return c;
}
function d() {
    return void 1;
}
function e() {
    return void 2;
}
function f() {
    return;
}
function g(h, i) {
    j.k(h, i);
    l(h);
    return;
}
function m(h, i) {
    j.k(h, i);
    if (h) {
        n(i);
        l(h);
        return h + i;
    }
    return c;
}
function o(h, i) {
    j.k(h, i);
    if (h) {
        n(i);
        l(h);
        return void 3;
    }
    return h + i;
}
function p(h, i) {
    n(h);
    q(i);
    return void 4;
}
function r(h, i) {
    n(h);
    q(i);
    return c;
}
function s() {
    return false;
}
function t() {
    return null;
}
function u() {
    return 5;
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "a",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "b",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "d",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Literal",
                                value: 1,
                            },
                            prefix: true,
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "e",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Literal",
                                value: 2,
                            },
                            prefix: true,
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "f",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: null,
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "g",
            },
            params: [
                {
                    type: "Identifier",
                    name: "h",
                },
                {
                    type: "Identifier",
                    name: "i",
                },
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "j",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "k",
                                },
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                                {
                                    type: "Identifier",
                                    name: "i",
                                },
                            ],
                        },
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "l",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                            ],
                        },
                    },
                    {
                        type: "ReturnStatement",
                        argument: null,
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "m",
            },
            params: [
                {
                    type: "Identifier",
                    name: "h",
                },
                {
                    type: "Identifier",
                    name: "i",
                },
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "j",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "k",
                                },
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                                {
                                    type: "Identifier",
                                    name: "i",
                                },
                            ],
                        },
                    },
                    {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "h",
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "n",
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "i",
                                            },
                                        ],
                                    },
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "l",
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "h",
                                            },
                                        ],
                                    },
                                },
                                {
                                    type: "ReturnStatement",
                                    argument: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Identifier",
                                            name: "h",
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "i",
                                        },
                                    },
                                },
                            ],
                        },
                        alternate: null,
                    },
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "o",
            },
            params: [
                {
                    type: "Identifier",
                    name: "h",
                },
                {
                    type: "Identifier",
                    name: "i",
                },
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: false,
                                object: {
                                    type: "Identifier",
                                    name: "j",
                                },
                                property: {
                                    type: "Identifier",
                                    name: "k",
                                },
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                                {
                                    type: "Identifier",
                                    name: "i",
                                },
                            ],
                        },
                    },
                    {
                        type: "IfStatement",
                        test: {
                            type: "Identifier",
                            name: "h",
                        },
                        consequent: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "n",
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "i",
                                            },
                                        ],
                                    },
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "Identifier",
                                            name: "l",
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "h",
                                            },
                                        ],
                                    },
                                },
                                {
                                    type: "ReturnStatement",
                                    argument: {
                                        type: "UnaryExpression",
                                        operator: "void",
                                        argument: {
                                            type: "Literal",
                                            value: 3,
                                        },
                                        prefix: true,
                                    },
                                },
                            ],
                        },
                        alternate: null,
                    },
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Identifier",
                                name: "h",
                            },
                            right: {
                                type: "Identifier",
                                name: "i",
                            },
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "p",
            },
            params: [
                {
                    type: "Identifier",
                    name: "h",
                },
                {
                    type: "Identifier",
                    name: "i",
                },
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "n",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                            ],
                        },
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "q",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "i",
                                },
                            ],
                        },
                    },
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "UnaryExpression",
                            operator: "void",
                            argument: {
                                type: "Literal",
                                value: 4,
                            },
                            prefix: true,
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "r",
            },
            params: [
                {
                    type: "Identifier",
                    name: "h",
                },
                {
                    type: "Identifier",
                    name: "i",
                },
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "n",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "h",
                                },
                            ],
                        },
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "q",
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "i",
                                },
                            ],
                        },
                    },
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Identifier",
                            name: "c",
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "s",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Literal",
                            value: false,
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "t",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Literal",
                            value: "null",
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "u",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ReturnStatement",
                        argument: {
                            type: "Literal",
                            value: 5,
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
   });

    it("should parse \"export default function a(){} let b; export {b as a};\"", () => {
        expect(parseModule(`export default function a(){} let b; export {b as a};`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExportDefaultDeclaration",
            declaration: {
                type: "FunctionDeclaration",
                id: {
                    type: "Identifier",
                    name: "a",
                },
                params: [],
                body: {
                    type: "BlockStatement",
                    body: [],
                },
                async: false,
                generator: false,
                expression: false,
            },
        },
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "b",
                    },
                    init: null,
                },
            ],
            kind: "let",
        },
        {
            type: "ExportNamedDeclaration",
            declaration: null,
            specifiers: [
                {
                    type: "ExportSpecifier",
                    exported: {
                        type: "Identifier",
                        name: "a",
                    },
                    local: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            ],
            source: null,
        },
    ],
    sourceType: "module",
});
   });

    it("should parse \"new(a in b)\"", () => {
        expect(parseScript(`new(a in b)`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "NewExpression",
                callee: {
                    type: "BinaryExpression",
                    operator: "in",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                },
                arguments: [],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`function a(){({*[yield](){}})}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "a",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    computed: false,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: true,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "init",
                                    method: true,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function *a(){yield delete 0}\"", () => {
        expect(parseScript(`function *a(){yield delete 0}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "a",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "YieldExpression",
                            argument: {
                                type: "UnaryExpression",
                                operator: "delete",
                                argument: {
                                    type: "Literal",
                                    value: 0,
                                },
                                prefix: true,
                            },
                            delegate: false,
                        },
                    },
                ],
            },
            generator: true,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function* a(){(class extends (yield) {});}\"", () => {
        expect(parseScript(`function* a(){(class extends (yield) {});}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "a",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "ClassExpression",
                            id: null,
                            superClass: {
                                type: "YieldExpression",
                                argument: null,
                                delegate: false,
                            },
                            body: {
                                type: "ClassBody",
                                body: [],
                            },
                        },
                    },
                ],
            },
            generator: true,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`switch (a) {
  case 'b': c();
  default:
    d();
    break;
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "SwitchStatement",
            discriminant: {
                type: "Identifier",
                name: "a",
            },
            cases: [
                {
                    type: "SwitchCase",
                    test: {
                        type: "Literal",
                        value: "b",
                    },
                    consequent: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                arguments: [],
                            },
                        },
                    ],
                },
                {
                    type: "SwitchCase",
                    test: null,
                    consequent: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "d",
                                },
                                arguments: [],
                            },
                        },
                        {
                            type: "BreakStatement",
                            label: null,
                        },
                    ],
                },
            ],
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`c: switch (1) {
  case 2:
    a();
    for (;;) if (b) break c;
    d();
  case 3+4:
    e();
  default:
    f();
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "LabeledStatement",
            label: {
                type: "Identifier",
                name: "c",
            },
            body: {
                type: "SwitchStatement",
                discriminant: {
                    type: "Literal",
                    value: 1,
                },
                cases: [
                    {
                        type: "SwitchCase",
                        test: {
                            type: "Literal",
                            value: 2,
                        },
                        consequent: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "a",
                                    },
                                    arguments: [],
                                },
                            },
                            {
                                type: "ForStatement",
                                init: null,
                                test: null,
                                update: null,
                                body: {
                                    type: "IfStatement",
                                    test: {
                                        type: "Identifier",
                                        name: "b",
                                    },
                                    consequent: {
                                        type: "BreakStatement",
                                        label: {
                                            type: "Identifier",
                                            name: "c",
                                        },
                                    },
                                    alternate: null,
                                },
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "d",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    {
                        type: "SwitchCase",
                        test: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Literal",
                                value: 3,
                            },
                            right: {
                                type: "Literal",
                                value: 4,
                            },
                        },
                        consequent: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "e",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                    {
                        type: "SwitchCase",
                        test: null,
                        consequent: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "f",
                                    },
                                    arguments: [],
                                },
                            },
                        ],
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`// 1
a();
b();
for (; false;);
// 2
a();
b();
for (c = 1; false;);
// 3
c = (a in b);
for (; false;);
// 4
c = (a in b);
for (d = 2; false;);`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "b",
                },
                arguments: [],
            },
        },
        {
            type: "ForStatement",
            init: null,
            test: {
                type: "Literal",
                value: false,
            },
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [],
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "b",
                },
                arguments: [],
            },
        },
        {
            type: "ForStatement",
            init: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "c",
                },
                right: {
                    type: "Literal",
                    value: 1,
                },
            },
            test: {
                type: "Literal",
                value: false,
            },
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "c",
                },
                right: {
                    type: "BinaryExpression",
                    operator: "in",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            },
        },
        {
            type: "ForStatement",
            init: null,
            test: {
                type: "Literal",
                value: false,
            },
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "c",
                },
                right: {
                    type: "BinaryExpression",
                    operator: "in",
                    left: {
                        type: "Identifier",
                        name: "a",
                    },
                    right: {
                        type: "Identifier",
                        name: "b",
                    },
                },
            },
        },
        {
            type: "ForStatement",
            init: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "Identifier",
                    name: "d",
                },
                right: {
                    type: "Literal",
                    value: 2,
                },
            },
            test: {
                type: "Literal",
                value: false,
            },
            update: null,
            body: {
                type: "EmptyStatement",
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`switch (1+2) {
  case 3: a(); break;
  case 4+5: b(); break;
  case 6+7+8: c(); break;
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "SwitchStatement",
            discriminant: {
                type: "BinaryExpression",
                operator: "+",
                left: {
                    type: "Literal",
                    value: 1,
                },
                right: {
                    type: "Literal",
                    value: 2,
                },
            },
            cases: [
                {
                    type: "SwitchCase",
                    test: {
                        type: "Literal",
                        value: 3,
                    },
                    consequent: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "a",
                                },
                                arguments: [],
                            },
                        },
                        {
                            type: "BreakStatement",
                            label: null,
                        },
                    ],
                },
                {
                    type: "SwitchCase",
                    test: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "Literal",
                            value: 4,
                        },
                        right: {
                            type: "Literal",
                            value: 5,
                        },
                    },
                    consequent: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "b",
                                },
                                arguments: [],
                            },
                        },
                        {
                            type: "BreakStatement",
                            label: null,
                        },
                    ],
                },
                {
                    type: "SwitchCase",
                    test: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Literal",
                                value: 6,
                            },
                            right: {
                                type: "Literal",
                                value: 7,
                            },
                        },
                        right: {
                            type: "Literal",
                            value: 8,
                        },
                    },
                    consequent: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "c",
                                },
                                arguments: [],
                            },
                        },
                        {
                            type: "BreakStatement",
                            label: null,
                        },
                    ],
                },
            ],
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`a["b"] = "c";
a["if"] = "if";
a["*"] = "d";
a["\u0EB3"] = "e";
a[""] = "f";`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "b",
                    },
                },
                right: {
                    type: "Literal",
                    value: "c",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "if",
                    },
                },
                right: {
                    type: "Literal",
                    value: "if",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "*",
                    },
                },
                right: {
                    type: "Literal",
                    value: "d",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "àº³",
                    },
                },
                right: {
                    type: "Literal",
                    value: "e",
                },
            },
        },
        {
            type: "ExpressionStatement",
            expression: {
                type: "AssignmentExpression",
                operator: "=",
                left: {
                    type: "MemberExpression",
                    computed: true,
                    object: {
                        type: "Identifier",
                        name: "a",
                    },
                    property: {
                        type: "Literal",
                        value: "",
                    },
                },
                right: {
                    type: "Literal",
                    value: "f",
                },
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"a(\"\v\");\"", () => {
        expect(parseScript(`a("\v");`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ExpressionStatement",
            expression: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [
                    {
                        type: "Literal",
                        value: "\u000b",
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"for (;;) if (a()) b(); else break;\"", () => {
        expect(parseScript(`for (;;) if (a()) b(); else break;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForStatement",
            init: null,
            test: null,
            update: null,
            body: {
                type: "IfStatement",
                test: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "a",
                    },
                    arguments: [],
                },
                consequent: {
                    type: "ExpressionStatement",
                    expression: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "b",
                        },
                        arguments: [],
                    },
                },
                alternate: {
                    type: "BreakStatement",
                    label: null,
                },
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`for (;a();) {
    if (b()) break;
    c();
    d();
}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "ForStatement",
            init: null,
            test: {
                type: "CallExpression",
                callee: {
                    type: "Identifier",
                    name: "a",
                },
                arguments: [],
            },
            update: null,
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "IfStatement",
                        test: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "b",
                            },
                            arguments: [],
                        },
                        consequent: {
                            type: "BreakStatement",
                            label: null,
                        },
                        alternate: null,
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "c",
                            },
                            arguments: [],
                        },
                    },
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "d",
                            },
                            arguments: [],
                        },
                    },
                ],
            },
        },
    ],
    sourceType: "script",
});
   });

    it("should parse export \"function a(){({*[yield](){}})}\"", () => {
        expect(parseScript(`for (;a();) {}`)).to.eql({
    type: "Program",
    body: [
        {
            type: "FunctionDeclaration",
            id: {
                type: "Identifier",
                name: "a",
            },
            params: [],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "yield",
                                    },
                                    computed: true,
                                    value: {
                                        type: "FunctionExpression",
                                        id: null,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [],
                                        },
                                        generator: true,
                                        expression: false,
                                        async: false,
                                    },
                                    kind: "init",
                                    method: true,
                                    shorthand: false,
                                },
                            ],
                        },
                    },
                ],
            },
            generator: false,
            expression: false,
            async: false,
        },
    ],
    sourceType: "script",
});
    });

    it("should parse \"var a = 1;\"", () => {
        expect(parseScript(`var a = 1;`)).to.eql({
    type: "Program",
    body: [
        {
            type: "VariableDeclaration",
            declarations: [
                {
                    type: "VariableDeclarator",
                    id: {
                        type: "Identifier",
                        name: "a",
                    },
                    init: {
                        type: "Literal",
                        value: 1,
                    },
                },
            ],
            kind: "var",
        },
    ],
    sourceType: "script",
});
   });

});
