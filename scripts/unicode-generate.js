#!/usr/bin/env node
"use strict"

// TODO: add tests for this
//
// Note: when editing the output, check the output to ensure it's actually valid asm.js:
// https://anvaka.github.io/asmalidator/

// This generates delta-encoded tables with a common lookup function aware of the encoding to
// minimize the number of comparisons required, especially for the common case. I'd rather not have
// a very slow runtime test.
//
// Note that this has a dependency on `unicode-9.0.0` if executed directly.
//
// `generate(opts)`, default-exported, generates a source from one or more lists of code points and
// associated exports.
//
// It accepts these named options:
//
// - `eval` - (optional) boolean, `true` if this should emit a JS body
// - `write` - promise-returning function called on each written string
// - `exports` - mapping of name + list of functions returning only *positive* code points
//
// To use this, you do something like this:
//
// ```js
// import {isIDContinue} from "./unicode-generated";
//
// if (isIDContinue(charCode)) {
//     doThings();
// }
// ```
//
// The codes are stored in a shared typed array as *n* packed sets of 2176 32-bit bit vectors.

const UnicodeCodeCount = 0x11000 /* codes */
const VectorSize = Uint32Array.BYTES_PER_ELEMENT * 8
const VectorMask = VectorSize - 1
const VectorBitCount = 32 - Math.clz32(VectorMask)
const VectorByteSize = UnicodeCodeCount / VectorSize

exports.generate = generate
async function generate(opts) {
    const ts = str => opts.eval ? "" : str
    const codes = new Uint32Array(Object.keys(opts.exports).length * VectorByteSize)
    let offset = 0

    await opts.write(`/* tslint:disable */
"use strict";
/*
 * Do not edit! This is an autogenerated file. If you wish to edit the source, please consult
 * scripts/unicode-generate.js
 */
`)

    for (const exported in opts.exports) {
        if (hasOwnProperty.call(opts.exports, exported)) {
            const items = opts.exports[exported]

            for (const list of items) {
                for (const item of list) {
                    codes[(item >>> VectorBitCount) + offset] |= 1 << (item & VectorMask)
                }
            }

            await opts.write(`
function ${exported}(code${ts(":number")}) {
    const bit = code & ${VectorMask}
    return (_[(code >>> ${VectorBitCount}) + ${offset}] >>> bit & 1) !== 0
}
`)
            offset += VectorByteSize
        }
    }

    await opts.write(`
const _ = new Uint32Array([${codes}])
${opts.eval ? "return" : "export"} {${Object.keys(opts.exports)}};
`)
}

// Edit these here to change the options when run directly.

if (require.main === module) {
    const path = require("path")
    const load = name => {
        const mod = require.resolve(`unicode-9.0.0/${name}/code-points`)
        const list = require(mod)

        // Keep this out of persistent memory
        delete require.cache[mod]
        return list
    }

    const stream = require("fs").createWriteStream(
        path.resolve(__dirname, "../src/unicode-generated.ts")
    )

    generate({
        write: str => new Promise((resolve, reject) => {
            stream.write(str, err => err != null ? reject(err) : resolve())
        }),
        exports: {
            isIDContinue: [load("Binary_Property/ID_Continue")],
            isIDStart: [load("Binary_Property/ID_Start")],
            mustEscape: [load("General_Category/Other"), load("General_Category/Separator")],
        },
    })
    // Node only started exiting on collected rejections in v8
    .catch(e => process.nextTick(() => { throw e }))
}
